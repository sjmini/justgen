//jweak, V, JNI_COMMIT, JNI_ABORT : unspecified type

//limitation
//When these functions are used to call private methods and constructors, 
//the method ID must be derived from the real class of obj, not from one of its superclasses.

typedef jbyte
refine isBytePointerClassInfo in jbyte*
refine isGetByteArrayElements in jbyte*
refine isThisByteArray in jbyte*
refine isNULLB in jbyte*

typedef jsize //equal to jint
refine isValidIndexE in jsize
//HSJ_NEW
refine isZeorE in jsize
//HSJ_NEW
refine isNegativeE in jsize
//HSJ_NEW
refine isPositiveE in jsize

typedef jweak <: jobject //same as @isWeakGlobalO
refine isDeletedJW in jweak
refine isNULLJW in jweak

typedef jobject
refine isGlobalO in jobject
refine isLocalO in jobject
//refine isWeakGlobalO in jobject //unspecified
refine isDeletedO in jobject
refine isLoaderO in jobject //class loader
refine isNULLO in jobject 
refine isSubClassO in jobject //the value should be subClass of array@isJobjectArrayJA
refine isReflectMethodO in jobject
refine isReflectConstructorO in jobject
refine isReflectFieldO in jobject

typedef jclass <: jobject
refine isNULLCL in jclass
refine isObjectCL in jclass
refine isThrowableCL in jclass //java.lang.Throwable
refine isArrayCL in jclass 
refine isContainMethod in jclass 

typedef jthrowable <: jobject
refine isNULLT in jthrowable

//jstring is always equal to java.lang.String
typedef jstring <: jobject
refine isNULLS in jstring 
refine isUnicodeS in jstring

typedef va_list

typedef jvalue
refine isArrayPtrJV in jvalue*
refine isNULLJV in jvalue*

typedef jfieldID
refine isStaticF in jfieldID
refine isNULLF in jfieldID

typedef jobjectRefType
typedef JNIInvalidRefType <: jobjectRefType
typedef JNILocalRefType <: jobjectRefType
typedef JNIGlobalRefType <: jobjectRefType
typedef JNIWeakGlobalRefType <: jobjectRefType

typedef jmethodID
refine isNULLM in jmethodID
refine isInitM in jmethodID
refine isStaticM in jmethodID
refine isJBooleanM in jmethodID
refine isJCharM in jmethodID
refine isJShortM in jmethodID
refine isJIntM in jmethodID
refine isJLongM in jmethodID
refine isJFloatM in jmethodID
refine isJDoubleM in jmethodID
refine isVoidM in jmethodID
refine isJByteM in jmethodID
refine isJObjectM in jmethodID
refine isPrivateM in jmethodID
refine isInThisClassM in jmethodID


typedef jchar
refine isUnicodeJC in jchar*
refine isNULLJC in jchar*
refine isGetStringCharsJC in jchar*
refine isGetStringCriticalJC in jchar*
refine isGetCharArrayElementsJC in jchar*
refine isThisCharArray in jchar*

typedef char
refine isMethodSigC in char*
refine isEndWithVC in char*
refine isEndWithZC in char*
refine isEndWithBC in char*
refine isEndWithCC in char*
refine isEndWithSC in char*
refine isEndWithIC in char*
refine isEndWithJC in char*
refine isEndWithFC in char*
refine isEndWithDC in char*
refine isEndWithLC in char*
refine isInitC in char*
refine isUTF8C in char*
refine isNULLC in char*
refine isGetStringUTFCharC in char*
refine isClassSigC in char*
refine isArrayClassSigC in char*
refine isFieldSigC in char*
refine isFieldNameC in char*
refine isMethodNameC in char*

typedef jboolean
refine isGetBooleanArrayElements in jboolean*
refine isThisBooleanArray in jboolean*
refine isNULLJB in jboolean*

typedef jshort
refine isGetShortArrayElements in jshort*
refine isThisShortArray in jshort*
refine isNULLJS in jshort*

typedef jint
refine isNegativeJI in jint //negative means < 0
refine isPositiveJI in jint //positive means > 0
refine isZeroJI in jint
refine isJNI_COMMITJI in jint
refine isJNI_ABORTJI in jint
refine isThisArrayLenJI in jint //number of array
refine isGetIntArrayElements in jint*
refine isThisIntArray in jint*
refine isNULLJI in jint*

typedef jlong
refine isGetLongArrayElements in jlong*
refine isThisLongArray in jlong*
refine isNULLJL in jlong*

typedef jfloat
refine isGetFloatArrayElements in jfloat*
refine isThisFloatArray in jfloat*
refine isNULLJF in jfloat*

typedef jdouble
refine isGetDoubleArrayElements in jdouble*
refine isThisDoubleArray in jdouble*
refine isNULLJD in jdouble*

typedef void
refine isGetPrimitiveArrayCritical in void*
refine isThisVoidArray in void*
refine isNULLV in void*


typedef JNINativeMethod
//HSJ_NEW
refine isNULLNMD in JNINativeMethod*

//special case : ... -> we are going to ignore

typedef jarray <: jobject
//HSJ_NEW
refine isNULLJA in jarray

typedef jobjectArray <: jarray
refine isNULLJOA in jobjectArray

typedef jbooleanArray <: jarray
refine isNULLJZA in jbooleanArray

typedef jbyteArray <: jarray
refine isNULLJBA in jbyteArray

typedef jcharArray <: jarray
refine isNULLJCA in jcharArray

typedef jshortArray <: jarray
refine isNULLJSA in jshortArray

typedef jintArray <: jarray
refine isNULLJIA in jintArray

typedef jlongArray <: jarray
refine isNULLJLA in jlongArray

typedef jfloatArray <: jarray
refine isNULLJFA in jfloatArray

typedef jdoubleArray <: jarray
refine isNULLJDA in jdoubleArray

typedef JavaVM
refine isNULLJVM in JavaVM**

typedef JNIEnv
refine isNULLEnv in JNIEnv*

rule{
  spec. jint GetVersion(JNIEnv*@isNULLEnv) 
  type. jint GetVersion(JNIEnv*)
}


rule{
  spec. jclass DefineClass(JNIEnv*, char*@isUTF8C, jobject@isLoaderO, jbyte*@isNULLB, jsize)
  spec. jclass DefineClass(JNIEnv*@isNULLEnv, char*@isUTF8C, jobject@isLoaderO, jbyte*@isBytePointerClassInfo, jsize)
  type. jclass DefineClass(JNIEnv*, char*, jobject, jbyte*, jsize)
}

rule{
  spec. jclass@!isNULLCL || isNULLCL FindClass(JNIEnv*, char*@isNULLC)
  spec. jclass@!isNULLCL || isNULLCL FindClass(JNIEnv*@isNULLEnv, char*@isClassSigC)
  type. jclass FindClass(JNIEnv*, char*)
}

rule{
  spec. jclass@isNULLCL GetSuperclass(JNIEnv*, jclass@isNULLCL)
  spec. jclass@isNULLCL GetSuperclass(JNIEnv*@isNULLEnv, jclass)
  type. jclass GetSuperclass(JNIEnv*, jclass)
}

rule{
  spec. jboolean IsAssignableFrom(JNIEnv*, jclass, jclass@isNULLCL)
  spec. jboolean IsAssignableFrom(JNIEnv*, jclass@isNULLCL, jclass)
  spec. jboolean IsAssignableFrom(JNIEnv*@isNULLEnv, jclass, jclass)
  type. jboolean IsAssignableFrom(JNIEnv*, jclass, jclass)
}

rule{
  spec. jint@isNegativeJI || isZeroJI Throw(JNIEnv*, jthrowable@isNULLT)
  spec. jint@isNegativeJI || isZeroJI Throw(JNIEnv*@isNULLEnv, jthrowable)
  type. jint Throw(JNIEnv*, jthrowable)
}

rule{
  spec. jint@isNegativeJI || isZeroJI ThrowNew(JNIEnv*, jclass@isNULLCL, char*)
  spec. jint@isNegativeJI || isZeroJI ThrowNew(JNIEnv*@isNULLEnv, jclass@isThrowableCL, char*)
  type. jint ThrowNew(JNIEnv*, jclass, char*)
}

rule{
  spec. jthrowable@!isNULLT ExceptionOccurred(JNIEnv*@isNULLEnv)
  type. jthrowable ExceptionOccurred(JNIEnv*)
}

rule{
  spec. void ExceptionDescribe(JNIEnv*@isNULLEnv)
  type. void ExceptionDescribe(JNIEnv*)
}

rule{
  spec. void ExceptionClear(JNIEnv*@isNULLEnv)
  type. void ExceptionClear(JNIEnv*)
}

rule{
  spec. void FatalError(JNIEnv*@isNULLEnv, char*)
  type. void FatalError(JNIEnv*, char*)
}

rule{
  spec. jboolean ExceptionCheck(JNIEnv*@isNULLEnv)
  type. jboolean ExceptionCheck(JNIEnv*)
}

rule{
  spec. jobject@isGlobalO NewGlobalRef(JNIEnv*@isNULLEnv, jobject@isGlobalO) 
  type. jobject NewGlobalRef(JNIEnv*, jobject)
}

rule{
  spec. void DeleteGlobalRef(JNIEnv*@isNULLEnv, jobject@isGlobalO)
  type. void DeleteGlobalRef(JNIEnv*, jobject)
}

rule{
  spec. void DeleteLocalRef(JNIEnv*@isNULLEnv, jobject@isLocalO) 
  type. void DeleteLocalRef(JNIEnv*, jobject) 
}

rule{
  spec. jint@isNegativeJI  || isZeroJI EnsureLocalCapacity(JNIEnv*, jint@isNegativeJI) 
  spec. jint@isNegativeJI  || isZeroJI EnsureLocalCapacity(JNIEnv*@isNULLEnv, jint@isPositiveJI) 
  type. jint EnsureLocalCapacity(JNIEnv*, jint) 
}

rule{
  spec. jint@isNegativeJI || isZeroJI PushLocalFrame(JNIEnv*, jint@isNegativeJI) 
  spec. jint@isNegativeJI || isZeroJI PushLocalFrame(JNIEnv*@isNULLEnv, jint@isPositiveJI) 
  type. jint PushLocalFrame(JNIEnv*, jint) 
}

rule{
  spec. jobject@isLocalO PopLocalFrame(JNIEnv*@isNULLEnv, jobject@isLocalO) 
  type. jobject PopLocalFrame(JNIEnv*, jobject) 
}

rule{
  spec. jobject@isLocalO NewLocalRef(JNIEnv*@isNULLEnv, jobject@isLocalO) 
  type. jobject NewLocalRef(JNIEnv*, jobject) 
}

rule{
  spec. jweak@!isNULLJW NewWeakGlobalRef(JNIEnv*@isNULLEnv, jobject@isLocalO) 
  type. jweak NewWeakGlobalRef(JNIEnv*, jobject) 
}

rule{
  spec. void DeleteWeakGlobalRef(JNIEnv*@isNULLEnv, jweak)
  type. void DeleteWeakGlobalRef(JNIEnv*, jweak)
}

rule{
  spec. jobject AllocObject(JNIEnv*, jclass@isNULLCL)
  spec. jobject AllocObject(JNIEnv*@isNULLEnv, jclass@!isArrayCL)
  type. jobject AllocObject(JNIEnv*, jclass)
}

rule{
  spec. jobject NewObject(JNIEnv*, jclass@isNULLCL, jmethodID@isInitM, ...) 
  spec. jobject NewObject(JNIEnv*@isNULLEnv, jclass@!isArrayCL, jmethodID@isInitM, ...) 
  type. jobject NewObject(JNIEnv*, jclass, jmethodID, ...) 
}

rule{
  spec. jobject NewObjectA(JNIEnv*, jclass@isNULLCL, jmethodID@isInitM, jvalue*@isArrayPtrJV) 
  spec. jobject NewObjectA(JNIEnv*@isNULLEnv, jclass@!isArrayCL, jmethodID@isInitM, jvalue*@isArrayPtrJV) 
  type. jobject NewObjectA(JNIEnv*, jclass, jmethodID, jvalue*) 
}

rule{
  spec. jobject NewObjectV(JNIEnv*, jclass@isNULLCL, jmethodID@isInitM, va_list)
  spec. jobject NewObjectV(JNIEnv*@isNULLEnv, jclass@!isArrayCL, jmethodID@isInitM, va_list)
  type. jobject NewObjectV(JNIEnv*, jclass, jmethodID, va_list)
}

rule{
  spec. jclass GetObjectClass(JNIEnv*@isNULLEnv, jobject@!isNULLO)
  type. jclass GetObjectClass(JNIEnv*, jobject) 
}

rule{
  spec. JNILocalRefType GetObjectRefType(JNIEnv*@isNULLEnv, jobject@isLocalO && !isDeletedO) 
  type. jobjectRefType GetObjectRefType(JNIEnv*, jobject) 
}

rule{
  spec. jboolean IsInstanceOf(JNIEnv*, #jobject, jclass@isNULLCL) 
  spec. jboolean IsInstanceOf(JNIEnv*@isNULLEnv, #jobject, #jclass) 
  type. jboolean IsInstanceOf(JNIEnv*, jobject, jclass) 
}

rule{
  spec. jboolean IsSameObject(JNIEnv*@isNULLEnv, #jobject, #jobject)
  type. jboolean IsSameObject(JNIEnv*, jobject, jobject)
}

rule{
  spec. jfieldID@!isStaticF || isNULLF GetFieldID(JNIEnv*, jclass, char*@isFieldNameC, char*@isNULLC)
  spec. jfieldID@!isStaticF || isNULLF GetFieldID(JNIEnv*, jclass, char*@isNULLC, char*@isFieldSigC)
  spec. jfieldID@!isStaticF || isNULLF GetFieldID(JNIEnv*, jclass@isNULLCL, char*@isFieldNameC, char*@isFieldSigC)
  spec. jfieldID@!isStaticF || isNULLF GetFieldID(JNIEnv*@isNULLEnv, jclass, char*@isFieldNameC, char*@isFieldSigC)
  type. jfieldID GetFieldID(JNIEnv*, jclass, char*, char*)
}

rule{
  spec. jdouble GetDoubleField(JNIEnv*@isNULLEnv, jobject@!isNULLO, jfieldID@!isStaticF)
  type. jdouble GetDoubleField(JNIEnv*, jobject, jfieldID)
}

rule{
  spec. jfloat GetFloatField(JNIEnv*@isNULLEnv, jobject@!isNULLO, jfieldID@!isStaticF)
  type. jfloat GetFloatField(JNIEnv*, jobject, jfieldID)
}

rule{
  spec. jlong GetLongField(JNIEnv*@isNULLEnv, jobject@!isNULLO, jfieldID@!isStaticF)
  type. jlong GetLongField(JNIEnv*, jobject, jfieldID)
}

rule{
  spec. jint GetIntField(JNIEnv*@isNULLEnv, jobject@!isNULLO, jfieldID@!isStaticF)
  type. jint GetIntField(JNIEnv*, jobject, jfieldID)
}

rule{
  spec. jshort GetShortField(JNIEnv*@isNULLEnv, jobject@!isNULLO, jfieldID@!isStaticF)
  type. jshort GetShortField(JNIEnv*, jobject, jfieldID)
}

rule{
  spec. jchar GetCharField(JNIEnv*@isNULLEnv, jobject@!isNULLO, jfieldID@!isStaticF)
  type. jchar GetCharField(JNIEnv*, jobject, jfieldID)
}

rule{
  spec. jbyte GetByteField(JNIEnv*@isNULLEnv, jobject@!isNULLO, jfieldID@!isStaticF)
  type. jbyte GetByteField(JNIEnv*, jobject, jfieldID)
}

rule{
  spec. jboolean GetBooleanField(JNIEnv*@isNULLEnv, jobject@!isNULLO, jfieldID@!isStaticF)
  type. jboolean GetBooleanField(JNIEnv*, jobject, jfieldID)
}

rule{
  spec. jobject GetObjectField(JNIEnv*@isNULLEnv, jobject@!isNULLO, jfieldID@!isStaticF)
  type. jobject GetObjectField(JNIEnv*, jobject, jfieldID)
}

rule{
  spec. void SetDoubleField(JNIEnv*@isNULLEnv, jobject@!isNULLO, jfieldID@!isStaticF, jdouble)
  type. void SetDoubleField(JNIEnv*, jobject, jfieldID, jdouble)
}

rule{
  spec. void SetFloatField(JNIEnv*@isNULLEnv, jobject@!isNULLO, jfieldID@!isStaticF, jfloat)
  type. void SetFloatField(JNIEnv*, jobject, jfieldID, jfloat)
}

rule{
  spec. void SetLongField(JNIEnv*@isNULLEnv, jobject@!isNULLO, jfieldID@!isStaticF, jlong)
  type. void SetLongField(JNIEnv*, jobject, jfieldID, jlong)
}

rule{
  spec. void SetIntField(JNIEnv*@isNULLEnv, jobject@!isNULLO, jfieldID@!isStaticF, jint)
  type. void SetIntField(JNIEnv*, jobject, jfieldID, jint)
}

rule{
  spec. void SetShortField(JNIEnv*@isNULLEnv, jobject@!isNULLO, jfieldID@!isStaticF, jshort)
  type. void SetShortField(JNIEnv*, jobject, jfieldID, jshort)
}

rule{
  spec. void SetCharField(JNIEnv*@isNULLEnv, jobject@!isNULLO, jfieldID@!isStaticF, jchar)
  type. void SetCharField(JNIEnv*, jobject, jfieldID, jchar)
}

rule{
  spec. void SetByteField(JNIEnv*@isNULLEnv, jobject@!isNULLO, jfieldID@!isStaticF, jbyte)
  type. void SetByteField(JNIEnv*, jobject, jfieldID, jbyte)
}

rule{
  spec. void SetBooleanField(JNIEnv*@isNULLEnv, jobject@!isNULLO, jfieldID@!isStaticF, jboolean)
  type. void SetBooleanField(JNIEnv*, jobject, jfieldID, jboolean)
}

rule{
  spec. void SetObjectField(JNIEnv*@isNULLEnv, jobject@!isNULLO, jfieldID@!isStaticF, #jobject)
  type. void SetObjectField(JNIEnv*, jobject, jfieldID, jobject)
}

rule{
  spec. jmethodID@(isVoidM && !isStaticM) || isNULLM GetMethodID(JNIEnv*, #jclass@isContainMethod, char*@isUTF8C, char*@isNULLC) 
  spec. jmethodID@(isVoidM && !isStaticM) || isNULLM GetMethodID(JNIEnv*, #jclass@isContainMethod, char*@isNULLC, char*@isMethodSigC && isEndWithVC) 
  spec. jmethodID@(isVoidM && !isStaticM) || isNULLM GetMethodID(JNIEnv*, jclass@isNULLCL, char*@isUTF8C, char*@isMethodSigC && isEndWithVC) 
  spec. jmethodID@(isVoidM && !isStaticM) || isNULLM GetMethodID(JNIEnv*@isNULLEnv, #jclass@isContainMethod, char*@isUTF8C, char*@isMethodSigC && isEndWithVC) 
  type. jmethodID GetMethodID(JNIEnv*, jclass, char*, char*) 
}


rule{
  spec. jboolean CallBooleanMethodV(JNIEnv*, jobject@isNULLO, jmethodID@(isJBooleanM && !isStaticM && !isPrivateM), va_list)
  spec. jboolean CallBooleanMethodV(JNIEnv*@isNULLEnv, #jobject, jmethodID@(isJBooleanM && !isStaticM && !isPrivateM), va_list)
  type. jboolean CallBooleanMethodV(JNIEnv*, jobject, jmethodID, va_list)
}

rule{
  spec. jchar CallCharMethodV(JNIEnv*, jobject@isNULLO, jmethodID@(isJCharM && !isStaticM && !isPrivateM), va_list)
  spec. jchar CallCharMethodV(JNIEnv*@isNULLEnv, #jobject, jmethodID@(isJCharM && !isStaticM && !isPrivateM), va_list)
  type. jchar CallCharMethodV(JNIEnv*, jobject, jmethodID, va_list)
}

rule{
  spec. jshort CallShortMethodV(JNIEnv*, jobject@isNULLO, jmethodID@(isJShortM && !isStaticM && !isPrivateM), va_list)
  spec. jshort CallShortMethodV(JNIEnv*@isNULLEnv, #jobject, jmethodID@(isJShortM && !isStaticM && !isPrivateM), va_list)
  type. jshort CallShortMethodV(JNIEnv*, jobject, jmethodID, va_list)
}

rule{
  spec. jint CallIntMethodV(JNIEnv*, jobject@isNULLO, jmethodID@(isJIntM && !isStaticM && !isPrivateM), va_list)
  spec. jint CallIntMethodV(JNIEnv*@isNULLEnv, #jobject, jmethodID@(isJIntM && !isStaticM && !isPrivateM), va_list)
  type. jint CallIntMethodV(JNIEnv*, jobject, jmethodID, va_list)
}

rule{
  spec. jlong CallLongMethodV(JNIEnv*, jobject@isNULLO, jmethodID@(isJLongM && !isStaticM && !isPrivateM), va_list)
  spec. jlong CallLongMethodV(JNIEnv*@isNULLEnv, #jobject, jmethodID@(isJLongM && !isStaticM && !isPrivateM), va_list)
  type. jlong CallLongMethodV(JNIEnv*, jobject, jmethodID, va_list)
}

rule{
  spec. jfloat CallFloatMethodV(JNIEnv*, jobject@isNULLO, jmethodID@(isJFloatM && !isStaticM && !isPrivateM), va_list)
  spec. jfloat CallFloatMethodV(JNIEnv*@isNULLEnv, #jobject, jmethodID@(isJFloatM && !isStaticM && !isPrivateM), va_list)
  type. jfloat CallFloatMethodV(JNIEnv*, jobject, jmethodID, va_list)
}

rule{
  spec. jdouble CallDoubleMethodV(JNIEnv*, jobject@isNULLO, jmethodID@(isJDoubleM && !isStaticM && !isPrivateM), va_list)
  spec. jdouble CallDoubleMethodV(JNIEnv*@isNULLEnv, #jobject, jmethodID@(isJDoubleM && !isStaticM && !isPrivateM), va_list)
  type. jdouble CallDoubleMethodV(JNIEnv*, jobject, jmethodID, va_list)
}

rule{
  spec. jbyte CallByteMethodV(JNIEnv*, jobject@isNULLO, jmethodID@(isJByteM && !isStaticM && !isPrivateM), va_list)
  spec. jbyte CallByteMethodV(JNIEnv*@isNULLEnv, #jobject, jmethodID@(isJByteM && !isStaticM && !isPrivateM), va_list)
  type. jbyte CallByteMethodV(JNIEnv*, jobject, jmethodID, va_list)
}

rule{
  spec. jobject CallObjectMethodV(JNIEnv*, jobject@isNULLO, jmethodID@(isJObjectM && !isStaticM && !isPrivateM), va_list)
  spec. jobject CallObjectMethodV(JNIEnv*@isNULLEnv, #jobject, jmethodID@(isJObjectM && !isStaticM && !isPrivateM), va_list)
  type. jobject CallObjectMethodV(JNIEnv*, jobject, jmethodID, va_list)
}

rule{
  spec. void CallVoidMethodV(JNIEnv*, jobject@isNULLO, jmethodID@(isVoidM && !isStaticM && !isPrivateM), va_list)
  spec. void CallVoidMethodV(JNIEnv*@isNULLEnv, #jobject, jmethodID@(isVoidM && !isStaticM && !isPrivateM), va_list)
  type. void CallVoidMethodV(JNIEnv*, jobject, jmethodID, va_list)
}

rule{
  spec. jboolean CallBooleanMethodA(JNIEnv*, jobject@isNULLO, jmethodID@(isJBooleanM && !isStaticM && !isPrivateM), jvalue*@isArrayPtrJV)
  spec. jboolean CallBooleanMethodA(JNIEnv*@isNULLEnv, #jobject, jmethodID@(isJBooleanM && !isStaticM && !isPrivateM), jvalue*@isArrayPtrJV)
  type. jboolean CallBooleanMethodA(JNIEnv*, jobject, jmethodID, jvalue*)
}

rule{
  spec. jchar CallCharMethodA(JNIEnv*, jobject@isNULLO, jmethodID@(isJCharM && !isStaticM && !isPrivateM), jvalue*@isArrayPtrJV)
  spec. jchar CallCharMethodA(JNIEnv*@isNULLEnv, #jobject, jmethodID@(isJCharM && !isStaticM && !isPrivateM), jvalue*@isArrayPtrJV)
  type. jchar CallCharMethodA(JNIEnv*, jobject, jmethodID, jvalue*)
}

rule{
  spec. jshort CallShortMethodA(JNIEnv*, jobject@isNULLO, jmethodID@(isJShortM && !isStaticM && !isPrivateM), jvalue*@isArrayPtrJV)
  spec. jshort CallShortMethodA(JNIEnv*@isNULLEnv, #jobject, jmethodID@(isJShortM && !isStaticM && !isPrivateM), jvalue*@isArrayPtrJV)
  type. jshort CallShortMethodA(JNIEnv*, jobject, jmethodID, jvalue*)
}

rule{
  spec. jint CallIntMethodA(JNIEnv*, jobject@isNULLO, jmethodID@(isJIntM && !isStaticM && !isPrivateM), jvalue*@isArrayPtrJV)
  spec. jint CallIntMethodA(JNIEnv*@isNULLEnv, #jobject, jmethodID@(isJIntM && !isStaticM && !isPrivateM), jvalue*@isArrayPtrJV)
  type. jint CallIntMethodA(JNIEnv*, jobject, jmethodID, jvalue*)
}

rule{
  spec. jlong CallLongMethodA(JNIEnv*, jobject@isNULLO, jmethodID@(isJLongM && !isStaticM && !isPrivateM), jvalue*@isArrayPtrJV)
  spec. jlong CallLongMethodA(JNIEnv*@isNULLEnv, #jobject, jmethodID@(isJLongM && !isStaticM && !isPrivateM), jvalue*@isArrayPtrJV)
  type. jlong CallLongMethodA(JNIEnv*, jobject, jmethodID, jvalue*)
}

rule{
  spec. jfloat CallFloatMethodA(JNIEnv*, jobject@isNULLO, jmethodID@(isJFloatM && !isStaticM && !isPrivateM), jvalue*@isArrayPtrJV)
  spec. jfloat CallFloatMethodA(JNIEnv*@isNULLEnv, #jobject, jmethodID@(isJFloatM && !isStaticM && !isPrivateM), jvalue*@isArrayPtrJV)
  type. jfloat CallFloatMethodA(JNIEnv*, jobject, jmethodID, jvalue*)
}

rule{
  spec. jdouble CallDoubleMethodA(JNIEnv*, jobject@isNULLO, jmethodID@(isJDoubleM && !isStaticM && !isPrivateM), jvalue*@isArrayPtrJV)
  spec. jdouble CallDoubleMethodA(JNIEnv*@isNULLEnv, #jobject, jmethodID@(isJDoubleM && !isStaticM && !isPrivateM), jvalue*@isArrayPtrJV)
  type. jdouble CallDoubleMethodA(JNIEnv*, jobject, jmethodID, jvalue*)
}

rule{
  spec. jbyte CallByteMethodA(JNIEnv*, jobject@isNULLO, jmethodID@(isJByteM && !isStaticM && !isPrivateM), jvalue*@isArrayPtrJV)
  spec. jbyte CallByteMethodA(JNIEnv*@isNULLEnv, #jobject, jmethodID@(isJByteM && !isStaticM && !isPrivateM), jvalue*@isArrayPtrJV)
  type. jbyte CallByteMethodA(JNIEnv*, jobject, jmethodID, jvalue*)
}

rule{
  spec. jobject CallObjectMethodA(JNIEnv*, jobject@isNULLO, jmethodID@(isJObjectM && !isStaticM && !isPrivateM), jvalue*@isArrayPtrJV)
  spec. jobject CallObjectMethodA(JNIEnv*@isNULLEnv, #jobject, jmethodID@(isJObjectM && !isStaticM && !isPrivateM), jvalue*@isArrayPtrJV)
  type. jobject CallObjectMethodA(JNIEnv*, jobject, jmethodID, jvalue*)
}

rule{
  spec. void CallVoidMethodA(JNIEnv*, jobject@isNULLO, jmethodID@(isVoidM && !isStaticM && !isPrivateM), jvalue*@isArrayPtrJV)
  spec. void CallVoidMethodA(JNIEnv*@isNULLEnv, #jobject, jmethodID@(isVoidM && !isStaticM && !isPrivateM), jvalue*@isArrayPtrJV)
  type. void CallVoidMethodA(JNIEnv*, jobject, jmethodID, jvalue*)
}

rule{
  spec. jboolean CallBooleanMethod(JNIEnv*, jobject@isNULLO, jmethodID@(isJBooleanM && !isStaticM && !isPrivateM), ...)
  spec. jboolean CallBooleanMethod(JNIEnv*@isNULLEnv, #jobject, jmethodID@(isJBooleanM && !isStaticM && !isPrivateM), ...)
  type. jboolean CallBooleanMethod(JNIEnv*, jobject, jmethodID, ...)
}

rule{
  spec. jchar CallCharMethod(JNIEnv*, jobject@isNULLO, jmethodID@(isJCharM && !isStaticM && !isPrivateM), ...)
  spec. jchar CallCharMethod(JNIEnv*@isNULLEnv, #jobject, jmethodID@(isJCharM && !isStaticM && !isPrivateM), ...)
  type. jchar CallCharMethod(JNIEnv*, jobject, jmethodID, ...)
}

rule{
  spec. jshort CallShortMethod(JNIEnv*, jobject@isNULLO, jmethodID@(isJShortM && !isStaticM && !isPrivateM), ...)
  spec. jshort CallShortMethod(JNIEnv*@isNULLEnv, #jobject, jmethodID@(isJShortM && !isStaticM && !isPrivateM), ...)
  type. jshort CallShortMethod(JNIEnv*, jobject, jmethodID, ...)
}

rule{
  spec. jint CallIntMethod(JNIEnv*, jobject@isNULLO, jmethodID@(isJIntM && !isStaticM && !isPrivateM), ...)
  spec. jint CallIntMethod(JNIEnv*@isNULLEnv, #jobject, jmethodID@(isJIntM && !isStaticM && !isPrivateM), ...)
  type. jint CallIntMethod(JNIEnv*, jobject, jmethodID, ...)
}

rule{
  spec. jlong CallLongMethod(JNIEnv*, jobject@isNULLO, jmethodID@(isJLongM && !isStaticM && !isPrivateM), ...)
  spec. jlong CallLongMethod(JNIEnv*@isNULLEnv, #jobject, jmethodID@(isJLongM && !isStaticM && !isPrivateM), ...)
  type. jlong CallLongMethod(JNIEnv*, jobject, jmethodID, ...)
}

rule{
  spec. jfloat CallFloatMethod(JNIEnv*, jobject@isNULLO, jmethodID@(isJFloatM && !isStaticM && !isPrivateM), ...)
  spec. jfloat CallFloatMethod(JNIEnv*@isNULLEnv, #jobject, jmethodID@(isJFloatM && !isStaticM && !isPrivateM), ...)
  type. jfloat CallFloatMethod(JNIEnv*, jobject, jmethodID, ...)
}

rule{
  spec. jdouble CallDoubleMethod(JNIEnv*, jobject@isNULLO, jmethodID@(isJDoubleM && !isStaticM && !isPrivateM), ...)
  spec. jdouble CallDoubleMethod(JNIEnv*@isNULLEnv, #jobject, jmethodID@(isJDoubleM && !isStaticM && !isPrivateM), ...)
  type. jdouble CallDoubleMethod(JNIEnv*, jobject, jmethodID, ...)
}

rule{
  spec. jbyte CallByteMethod(JNIEnv*, jobject@isNULLO, jmethodID@(isJByteM && !isStaticM && !isPrivateM), ...)
  spec. jbyte CallByteMethod(JNIEnv*@isNULLEnv, #jobject, jmethodID@(isJByteM && !isStaticM && !isPrivateM), ...)
  type. jbyte CallByteMethod(JNIEnv*, jobject, jmethodID, ...)
}

rule{
  spec. jobject CallObjectMethod(JNIEnv*, jobject@isNULLO, jmethodID@(isJObjectM && !isStaticM && !isPrivateM), ...)
  spec. jobject CallObjectMethod(JNIEnv*@isNULLEnv, #jobject, jmethodID@(isJObjectM && !isStaticM && !isPrivateM), ...)
  type. jobject CallObjectMethod(JNIEnv*, jobject, jmethodID, ...)
}

rule{
  spec. void CallVoidMethod(JNIEnv*, jobject@isNULLO, jmethodID@(isVoidM && !isStaticM && !isPrivateM), ...)
  spec. void CallVoidMethod(JNIEnv*@isNULLEnv, #jobject, jmethodID@(isVoidM && !isStaticM && !isPrivateM), ...)
  type. void CallVoidMethod(JNIEnv*, jobject, jmethodID, ...)
}

rule{
  spec. jdouble CallNonvirtualDoubleMethodV(JNIEnv*, #jobject, jclass@isNULLCL, jmethodID@isJDoubleM && !isStaticM && isInThisClassM, va_list) 
  spec. jdouble CallNonvirtualDoubleMethodV(JNIEnv*, jobject@isNULLO, #jclass, jmethodID@isJDoubleM && !isStaticM && isInThisClassM, va_list) 
  spec. jdouble CallNonvirtualDoubleMethodV(JNIEnv*@isNULLEnv, #jobject, #jclass, jmethodID@isJDoubleM && !isStaticM && isInThisClassM, va_list) 
  type. jdouble CallNonvirtualDoubleMethodV(JNIEnv*, jobject, jclass, jmethodID, va_list) 
}

rule{
  spec. jfloat CallNonvirtualFloatMethodV(JNIEnv*, #jobject, jclass@isNULLCL, jmethodID@isJFloatM && !isStaticM && isInThisClassM, va_list) 
  spec. jfloat CallNonvirtualFloatMethodV(JNIEnv*, jobject@isNULLO, #jclass, jmethodID@isJFloatM && !isStaticM && isInThisClassM, va_list) 
  spec. jfloat CallNonvirtualFloatMethodV(JNIEnv*@isNULLEnv, #jobject, #jclass, jmethodID@isJFloatM && !isStaticM && isInThisClassM, va_list) 
  type. jfloat CallNonvirtualFloatMethodV(JNIEnv*, jobject, jclass, jmethodID, va_list) 
}

rule{
  spec. jlong CallNonvirtualLongMethodV(JNIEnv*, #jobject, jclass@isNULLCL, jmethodID@isJLongM && !isStaticM && isInThisClassM, va_list) 
  spec. jlong CallNonvirtualLongMethodV(JNIEnv*, jobject@isNULLO, #jclass, jmethodID@isJLongM && !isStaticM && isInThisClassM, va_list) 
  spec. jlong CallNonvirtualLongMethodV(JNIEnv*@isNULLEnv, #jobject, #jclass, jmethodID@isJLongM && !isStaticM && isInThisClassM, va_list) 
  type. jlong CallNonvirtualLongMethodV(JNIEnv*, jobject, jclass, jmethodID, va_list) 
}


rule{
  spec. jint CallNonvirtualIntMethodV(JNIEnv*, #jobject, jclass@isNULLCL, jmethodID@isJIntM && !isStaticM && isInThisClassM, va_list) 
  spec. jint CallNonvirtualIntMethodV(JNIEnv*, jobject@isNULLO, #jclass, jmethodID@isJIntM && !isStaticM && isInThisClassM, va_list) 
  spec. jint CallNonvirtualIntMethodV(JNIEnv*@isNULLEnv, #jobject, #jclass, jmethodID@isJIntM && !isStaticM && isInThisClassM, va_list) 
  type. jint CallNonvirtualIntMethodV(JNIEnv*, jobject, jclass, jmethodID, va_list) 
}

rule{
  spec. jshort CallNonvirtualShortMethodV(JNIEnv*, #jobject, jclass@isNULLCL, jmethodID@isJShortM && !isStaticM && isInThisClassM, va_list) 
  spec. jshort CallNonvirtualShortMethodV(JNIEnv*, jobject@isNULLO, #jclass, jmethodID@isJShortM && !isStaticM && isInThisClassM, va_list) 
  spec. jshort CallNonvirtualShortMethodV(JNIEnv*@isNULLEnv, #jobject, #jclass, jmethodID@isJShortM && !isStaticM && isInThisClassM, va_list) 
  type. jshort CallNonvirtualShortMethodV(JNIEnv*, jobject, jclass, jmethodID, va_list) 
}

rule{
  spec. jchar CallNonvirtualCharMethodV(JNIEnv*, #jobject, jclass@isNULLCL, jmethodID@isJCharM && !isStaticM && isInThisClassM, va_list) 
  spec. jchar CallNonvirtualCharMethodV(JNIEnv*, jobject@isNULLO, #jclass, jmethodID@isJCharM && !isStaticM && isInThisClassM, va_list) 
  spec. jchar CallNonvirtualCharMethodV(JNIEnv*@isNULLEnv, #jobject, #jclass, jmethodID@isJCharM && !isStaticM && isInThisClassM, va_list) 
  type. jchar CallNonvirtualCharMethodV(JNIEnv*, jobject, jclass, jmethodID, va_list) 
}

rule{
  spec. jbyte CallNonvirtualByteMethodV(JNIEnv*, #jobject, jclass@isNULLCL, jmethodID@isJByteM && !isStaticM && isInThisClassM, va_list) 
  spec. jbyte CallNonvirtualByteMethodV(JNIEnv*, jobject@isNULLO, #jclass, jmethodID@isJByteM && !isStaticM && isInThisClassM, va_list) 
  spec. jbyte CallNonvirtualByteMethodV(JNIEnv*@isNULLEnv, #jobject, #jclass, jmethodID@isJByteM && !isStaticM && isInThisClassM, va_list) 
  type. jbyte CallNonvirtualByteMethodV(JNIEnv*, jobject, jclass, jmethodID, va_list) 
}

rule{
  spec. jobject CallNonvirtualObjectMethodV(JNIEnv*, #jobject, jclass@isNULLCL, jmethodID@isJObjectM && !isStaticM && isInThisClassM, va_list) 
  spec. jobject CallNonvirtualObjectMethodV(JNIEnv*, jobject@isNULLO, #jclass, jmethodID@isJObjectM && !isStaticM && isInThisClassM, va_list) 
  spec. jobject CallNonvirtualObjectMethodV(JNIEnv*@isNULLEnv, #jobject, #jclass, jmethodID@isJObjectM && !isStaticM && isInThisClassM, va_list) 
  type. jobject CallNonvirtualObjectMethodV(JNIEnv*, jobject, jclass, jmethodID, va_list) 
}

rule{
  spec. void CallNonvirtualVoidMethodV(JNIEnv*, #jobject, jclass@isNULLCL, jmethodID@isVoidM && !isStaticM && isInThisClassM, va_list) 
  spec. void CallNonvirtualVoidMethodV(JNIEnv*, jobject@isNULLO, #jclass, jmethodID@isVoidM && !isStaticM && isInThisClassM, va_list) 
  spec. void CallNonvirtualVoidMethodV(JNIEnv*@isNULLEnv, #jobject, #jclass, jmethodID@isVoidM && !isStaticM && isInThisClassM, va_list) 
  type. void CallNonvirtualVoidMethodV(JNIEnv*, jobject, jclass, jmethodID, va_list) 
}

rule{
  spec. jboolean CallNonvirtualBooleanMethodV(JNIEnv*, #jobject, jclass@isNULLCL, jmethodID@isJBooleanM && !isStaticM && isInThisClassM, va_list) 
  spec. jboolean CallNonvirtualBooleanMethodV(JNIEnv*, jobject@isNULLO, #jclass, jmethodID@isJBooleanM && !isStaticM && isInThisClassM, va_list) 
  spec. jboolean CallNonvirtualBooleanMethodV(JNIEnv*@isNULLEnv, #jobject, #jclass, jmethodID@isJBooleanM && !isStaticM && isInThisClassM, va_list) 
  type. jboolean CallNonvirtualBooleanMethodV(JNIEnv*, jobject, jclass, jmethodID, va_list) 
}

rule{
  spec. jdouble CallNonvirtualDoubleMethodA(JNIEnv*, #jobject, jclass@isNULLCL, jmethodID@isJDoubleM && !isStaticM && isInThisClassM, jvalue*@isArrayPtrJV) 
  spec. jdouble CallNonvirtualDoubleMethodA(JNIEnv*, jobject@isNULLO, #jclass, jmethodID@isJDoubleM && !isStaticM && isInThisClassM, jvalue*@isArrayPtrJV) 
  spec. jdouble CallNonvirtualDoubleMethodA(JNIEnv*@isNULLEnv, #jobject, #jclass, jmethodID@isJDoubleM && !isStaticM && isInThisClassM, jvalue*@isArrayPtrJV) 
  type. jdouble CallNonvirtualDoubleMethodA(JNIEnv*, jobject, jclass, jmethodID, jvalue*) 
}

rule{
  spec. jfloat CallNonvirtualFloatMethodA(JNIEnv*, #jobject, jclass@isNULLCL, jmethodID@isJFloatM && !isStaticM && isInThisClassM, jvalue*@isArrayPtrJV) 
  spec. jfloat CallNonvirtualFloatMethodA(JNIEnv*, jobject@isNULLO, #jclass, jmethodID@isJFloatM && !isStaticM && isInThisClassM, jvalue*@isArrayPtrJV) 
  spec. jfloat CallNonvirtualFloatMethodA(JNIEnv*@isNULLEnv, #jobject, #jclass, jmethodID@isJFloatM && !isStaticM && isInThisClassM, jvalue*@isArrayPtrJV) 
  type. jfloat CallNonvirtualFloatMethodA(JNIEnv*, jobject, jclass, jmethodID, jvalue*) 
}

rule{
  spec. jlong CallNonvirtualLongMethodA(JNIEnv*, #jobject, jclass@isNULLCL, jmethodID@isJLongM && !isStaticM && isInThisClassM, jvalue*@isArrayPtrJV) 
  spec. jlong CallNonvirtualLongMethodA(JNIEnv*, jobject@isNULLO, #jclass, jmethodID@isJLongM && !isStaticM && isInThisClassM, jvalue*@isArrayPtrJV) 
  spec. jlong CallNonvirtualLongMethodA(JNIEnv*@isNULLEnv, #jobject, #jclass, jmethodID@isJLongM && !isStaticM && isInThisClassM, jvalue*@isArrayPtrJV) 
  type. jlong CallNonvirtualLongMethodA(JNIEnv*, jobject, jclass, jmethodID, jvalue*) 
}


rule{
  spec. jint CallNonvirtualIntMethodA(JNIEnv*, #jobject, jclass@isNULLCL, jmethodID@isJIntM && !isStaticM && isInThisClassM, jvalue*@isArrayPtrJV) 
  spec. jint CallNonvirtualIntMethodA(JNIEnv*, jobject@isNULLO, #jclass, jmethodID@isJIntM && !isStaticM && isInThisClassM, jvalue*@isArrayPtrJV) 
  spec. jint CallNonvirtualIntMethodA(JNIEnv*@isNULLEnv, #jobject, #jclass, jmethodID@isJIntM && !isStaticM && isInThisClassM, jvalue*@isArrayPtrJV) 
  type. jint CallNonvirtualIntMethodA(JNIEnv*, jobject, jclass, jmethodID, jvalue*) 
}

rule{
  spec. jshort CallNonvirtualShortMethodA(JNIEnv*, #jobject, jclass@isNULLCL, jmethodID@isJShortM && !isStaticM && isInThisClassM, jvalue*@isArrayPtrJV) 
  spec. jshort CallNonvirtualShortMethodA(JNIEnv*, jobject@isNULLO, #jclass, jmethodID@isJShortM && !isStaticM && isInThisClassM, jvalue*@isArrayPtrJV) 
  spec. jshort CallNonvirtualShortMethodA(JNIEnv*@isNULLEnv, #jobject, #jclass, jmethodID@isJShortM && !isStaticM && isInThisClassM, jvalue*@isArrayPtrJV) 
  type. jshort CallNonvirtualShortMethodA(JNIEnv*, jobject, jclass, jmethodID, jvalue*) 
}

rule{
  spec. jchar CallNonvirtualCharMethodA(JNIEnv*, #jobject, jclass@isNULLCL, jmethodID@isJCharM && !isStaticM && isInThisClassM, jvalue*@isArrayPtrJV) 
  spec. jchar CallNonvirtualCharMethodA(JNIEnv*, jobject@isNULLO, #jclass, jmethodID@isJCharM && !isStaticM && isInThisClassM, jvalue*@isArrayPtrJV) 
  spec. jchar CallNonvirtualCharMethodA(JNIEnv*@isNULLEnv, #jobject, #jclass, jmethodID@isJCharM && !isStaticM && isInThisClassM, jvalue*@isArrayPtrJV) 
  type. jchar CallNonvirtualCharMethodA(JNIEnv*, jobject, jclass, jmethodID, jvalue*) 
}

rule{
  spec. jbyte CallNonvirtualByteMethodA(JNIEnv*, #jobject, jclass@isNULLCL, jmethodID@isJByteM && !isStaticM && isInThisClassM, jvalue*@isArrayPtrJV) 
  spec. jbyte CallNonvirtualByteMethodA(JNIEnv*, jobject@isNULLO, #jclass, jmethodID@isJByteM && !isStaticM && isInThisClassM, jvalue*@isArrayPtrJV) 
  spec. jbyte CallNonvirtualByteMethodA(JNIEnv*@isNULLEnv, #jobject, #jclass, jmethodID@isJByteM && !isStaticM && isInThisClassM, jvalue*@isArrayPtrJV) 
  type. jbyte CallNonvirtualByteMethodA(JNIEnv*, jobject, jclass, jmethodID, jvalue*) 
}

rule{
  spec. jobject CallNonvirtualObjectMethodA(JNIEnv*, #jobject, jclass@isNULLCL, jmethodID@isJObjectM && !isStaticM && isInThisClassM, jvalue*@isArrayPtrJV) 
  spec. jobject CallNonvirtualObjectMethodA(JNIEnv*, jobject@isNULLO, #jclass, jmethodID@isJObjectM && !isStaticM && isInThisClassM, jvalue*@isArrayPtrJV) 
  spec. jobject CallNonvirtualObjectMethodA(JNIEnv*@isNULLEnv, #jobject, #jclass, jmethodID@isJObjectM && !isStaticM && isInThisClassM, jvalue*@isArrayPtrJV) 
  type. jobject CallNonvirtualObjectMethodA(JNIEnv*, jobject, jclass, jmethodID, jvalue*) 
}

rule{
  spec. void CallNonvirtualVoidMethodA(JNIEnv*, #jobject, jclass@isNULLCL, jmethodID@isVoidM && !isStaticM && isInThisClassM, jvalue*@isArrayPtrJV) 
  spec. void CallNonvirtualVoidMethodA(JNIEnv*, jobject@isNULLO, #jclass, jmethodID@isVoidM && !isStaticM && isInThisClassM, jvalue*@isArrayPtrJV) 
  spec. void CallNonvirtualVoidMethodA(JNIEnv*@isNULLEnv, #jobject, #jclass, jmethodID@isVoidM && !isStaticM && isInThisClassM, jvalue*@isArrayPtrJV) 
  type. void CallNonvirtualVoidMethodA(JNIEnv*, jobject, jclass, jmethodID, jvalue*) 
}

rule{
  spec. jboolean CallNonvirtualBooleanMethodA(JNIEnv*, #jobject, jclass@isNULLCL, jmethodID@isJBooleanM && !isStaticM && isInThisClassM, jvalue*@isArrayPtrJV) 
  spec. jboolean CallNonvirtualBooleanMethodA(JNIEnv*, jobject@isNULLO, #jclass, jmethodID@isJBooleanM && !isStaticM && isInThisClassM, jvalue*@isArrayPtrJV) 
  spec. jboolean CallNonvirtualBooleanMethodA(JNIEnv*@isNULLEnv, #jobject, #jclass, jmethodID@isJBooleanM && !isStaticM && isInThisClassM, jvalue*@isArrayPtrJV) 
  type. jboolean CallNonvirtualBooleanMethodA(JNIEnv*, jobject, jclass, jmethodID, jvalue*) 
}

rule{
  spec. jdouble CallNonvirtualDoubleMethod(JNIEnv*, #jobject, jclass@isNULLCL, jmethodID@isJDoubleM && !isStaticM && isInThisClassM, ...) 
  spec. jdouble CallNonvirtualDoubleMethod(JNIEnv*, jobject@isNULLO, #jclass, jmethodID@isJDoubleM && !isStaticM && isInThisClassM, ...) 
  spec. jdouble CallNonvirtualDoubleMethod(JNIEnv*@isNULLEnv, #jobject, #jclass, jmethodID@isJDoubleM && !isStaticM && isInThisClassM, ...) 
  type. jdouble CallNonvirtualDoubleMethod(JNIEnv*, jobject, jclass, jmethodID, ...) 
}

rule{
  spec. jfloat CallNonvirtualFloatMethod(JNIEnv*, #jobject, jclass@isNULLCL, jmethodID@isJFloatM && !isStaticM && isInThisClassM, ...) 
  spec. jfloat CallNonvirtualFloatMethod(JNIEnv*, jobject@isNULLO, #jclass, jmethodID@isJFloatM && !isStaticM && isInThisClassM, ...) 
  spec. jfloat CallNonvirtualFloatMethod(JNIEnv*@isNULLEnv, #jobject, #jclass, jmethodID@isJFloatM && !isStaticM && isInThisClassM, ...) 
  type. jfloat CallNonvirtualFloatMethod(JNIEnv*, jobject, jclass, jmethodID, ...) 
}

rule{
  spec. jlong CallNonvirtualLongMethod(JNIEnv*, #jobject, jclass@isNULLCL, jmethodID@isJLongM && !isStaticM && isInThisClassM, ...) 
  spec. jlong CallNonvirtualLongMethod(JNIEnv*, jobject@isNULLO, #jclass, jmethodID@isJLongM && !isStaticM && isInThisClassM, ...) 
  spec. jlong CallNonvirtualLongMethod(JNIEnv*@isNULLEnv, #jobject, #jclass, jmethodID@isJLongM && !isStaticM && isInThisClassM, ...) 
  type. jlong CallNonvirtualLongMethod(JNIEnv*, jobject, jclass, jmethodID, ...) 
}

rule{
  spec. jint CallNonvirtualIntMethod(JNIEnv*, #jobject, jclass@isNULLCL, jmethodID@isJIntM && !isStaticM && isInThisClassM, ...) 
  spec. jint CallNonvirtualIntMethod(JNIEnv*, jobject@isNULLO, #jclass, jmethodID@isJIntM && !isStaticM && isInThisClassM, ...) 
  spec. jint CallNonvirtualIntMethod(JNIEnv*@isNULLEnv, #jobject, #jclass, jmethodID@isJIntM && !isStaticM && isInThisClassM, ...) 
  type. jint CallNonvirtualIntMethod(JNIEnv*, jobject, jclass, jmethodID, ...) 
}

rule{
  spec. jshort CallNonvirtualShortMethod(JNIEnv*, #jobject, jclass@isNULLCL, jmethodID@isJShortM && !isStaticM && isInThisClassM, ...) 
  spec. jshort CallNonvirtualShortMethod(JNIEnv*, jobject@isNULLO, #jclass, jmethodID@isJShortM && !isStaticM && isInThisClassM, ...) 
  spec. jshort CallNonvirtualShortMethod(JNIEnv*@isNULLEnv, #jobject, #jclass, jmethodID@isJShortM && !isStaticM && isInThisClassM, ...) 
  type. jshort CallNonvirtualShortMethod(JNIEnv*, jobject, jclass, jmethodID, ...) 
}

rule{
  spec. jchar CallNonvirtualCharMethod(JNIEnv*, #jobject, jclass@isNULLCL, jmethodID@isJCharM && !isStaticM && isInThisClassM, ...) 
  spec. jchar CallNonvirtualCharMethod(JNIEnv*, jobject@isNULLO, #jclass, jmethodID@isJCharM && !isStaticM && isInThisClassM, ...) 
  spec. jchar CallNonvirtualCharMethod(JNIEnv*@isNULLEnv, #jobject, #jclass, jmethodID@isJCharM && !isStaticM && isInThisClassM, ...) 
  type. jchar CallNonvirtualCharMethod(JNIEnv*, jobject, jclass, jmethodID, ...) 
}

rule{
  spec. jbyte CallNonvirtualByteMethod(JNIEnv*, #jobject, jclass@isNULLCL, jmethodID@isJByteM && !isStaticM && isInThisClassM, ...) 
  spec. jbyte CallNonvirtualByteMethod(JNIEnv*, jobject@isNULLO, #jclass, jmethodID@isJByteM && !isStaticM && isInThisClassM, ...) 
  spec. jbyte CallNonvirtualByteMethod(JNIEnv*@isNULLEnv, #jobject, #jclass, jmethodID@isJByteM && !isStaticM && isInThisClassM, ...) 
  type. jbyte CallNonvirtualByteMethod(JNIEnv*, jobject, jclass, jmethodID, ...) 
}

rule{
  spec. jobject CallNonvirtualObjectMethod(JNIEnv*, #jobject, jclass@isNULLCL, jmethodID@isJObjectM && !isStaticM && isInThisClassM, ...) 
  spec. jobject CallNonvirtualObjectMethod(JNIEnv*, jobject@isNULLO, #jclass, jmethodID@isJObjectM && !isStaticM && isInThisClassM, ...) 
  spec. jobject CallNonvirtualObjectMethod(JNIEnv*@isNULLEnv, #jobject, #jclass, jmethodID@isJObjectM && !isStaticM && isInThisClassM, ...) 
  type. jobject CallNonvirtualObjectMethod(JNIEnv*, jobject, jclass, jmethodID, ...) 
}

rule{
  spec. void CallNonvirtualVoidMethod(JNIEnv*, #jobject, jclass@isNULLCL, jmethodID@isVoidM && !isStaticM && isInThisClassM, ...) 
  spec. void CallNonvirtualVoidMethod(JNIEnv*, jobject@isNULLO, #jclass, jmethodID@isVoidM && !isStaticM && isInThisClassM, ...) 
  spec. void CallNonvirtualVoidMethod(JNIEnv*@isNULLEnv, #jobject, #jclass, jmethodID@isVoidM && !isStaticM && isInThisClassM, ...) 
  type. void CallNonvirtualVoidMethod(JNIEnv*, jobject, jclass, jmethodID, ...) 
}

rule{
  spec. jboolean CallNonvirtualBooleanMethod(JNIEnv*, #jobject, jclass@isNULLCL, jmethodID@isJBooleanM && !isStaticM && isInThisClassM, ...) 
  spec. jboolean CallNonvirtualBooleanMethod(JNIEnv*, jobject@isNULLO, #jclass, jmethodID@isJBooleanM && !isStaticM && isInThisClassM, ...) 
  spec. jboolean CallNonvirtualBooleanMethod(JNIEnv*@isNULLEnv, #jobject, #jclass, jmethodID@isJBooleanM && !isStaticM && isInThisClassM, ...) 
  type. jboolean CallNonvirtualBooleanMethod(JNIEnv*, jobject, jclass, jmethodID, ...) 
}

rule{
  spec. jfieldID@isStaticF || isNULLF GetStaticFieldID(JNIEnv*, #jclass, char*@isFieldNameC, char*@isNULLC)
  spec. jfieldID@isStaticF || isNULLF GetStaticFieldID(JNIEnv*, #jclass, char*@isNULLC, char*@isFieldSigC && isUTF8C)
  spec. jfieldID@isStaticF || isNULLF GetStaticFieldID(JNIEnv*, jclass@isNULLCL, char*@isFieldNameC, char*@isFieldSigC && isUTF8C)
  spec. jfieldID@isStaticF || isNULLF GetStaticFieldID(JNIEnv*@isNULLEnv, #jclass, char*@isFieldNameC, char*@isFieldSigC && isUTF8C)
  type. jfieldID GetStaticFieldID(JNIEnv*, jclass, char*, char*) 
}

rule{
  spec. jdouble GetStaticDoubleField(JNIEnv*, jclass@isNULLCL, jfieldID@isStaticF)
  spec. jdouble GetStaticDoubleField(JNIEnv*@isNULLEnv, #jclass, jfieldID@isStaticF)
  type. jdouble GetStaticDoubleField(JNIEnv*, jclass, jfieldID)
}

rule{
  spec. jfloat GetStaticFloatField(JNIEnv*, jclass@isNULLCL, jfieldID@isStaticF)
  spec. jfloat GetStaticFloatField(JNIEnv*@isNULLEnv, #jclass, jfieldID@isStaticF)
  type. jfloat GetStaticFloatField(JNIEnv*, jclass, jfieldID)
}

rule{
  spec. jlong GetStaticLongField(JNIEnv*, jclass@isNULLCL, jfieldID@isStaticF)
  spec. jlong GetStaticLongField(JNIEnv*@isNULLEnv, #jclass, jfieldID@isStaticF)
  type. jlong GetStaticLongField(JNIEnv*, jclass, jfieldID)
}

rule{
  spec. jint GetStaticIntField(JNIEnv*, jclass@isNULLCL, jfieldID@isStaticF)
  spec. jint GetStaticIntField(JNIEnv*@isNULLEnv, #jclass, jfieldID@isStaticF)
  type. jint GetStaticIntField(JNIEnv*, jclass, jfieldID)
}

rule{
  spec. jshort GetStaticShortField(JNIEnv*, jclass@isNULLCL, jfieldID@isStaticF)
  spec. jshort GetStaticShortField(JNIEnv*@isNULLEnv, #jclass, jfieldID@isStaticF)
  type. jshort GetStaticShortField(JNIEnv*, jclass, jfieldID)
}

rule{
  spec. jchar GetStaticCharField(JNIEnv*, jclass@isNULLCL, jfieldID@isStaticF)
  spec. jchar GetStaticCharField(JNIEnv*@isNULLEnv, #jclass, jfieldID@isStaticF)
  type. jchar GetStaticCharField(JNIEnv*, jclass, jfieldID)
}

rule{
  spec. jbyte GetStaticByteField(JNIEnv*, jclass@isNULLCL, jfieldID@isStaticF)
  spec. jbyte GetStaticByteField(JNIEnv*@isNULLEnv, #jclass, jfieldID@isStaticF)
  type. jbyte GetStaticByteField(JNIEnv*, jclass, jfieldID)
}

rule{
  spec. jboolean GetStaticBooleanField(JNIEnv*, jclass@isNULLCL, jfieldID@isStaticF)
  spec. jboolean GetStaticBooleanField(JNIEnv*@isNULLEnv, #jclass, jfieldID@isStaticF)
  type. jboolean GetStaticBooleanField(JNIEnv*, jclass, jfieldID)
}

rule{
  spec. jobject GetStaticObjectField(JNIEnv*, jclass@isNULLCL, jfieldID@isStaticF)
  spec. jobject GetStaticObjectField(JNIEnv*@isNULLEnv, #jclass, jfieldID@isStaticF)
  type. jobject GetStaticObjectField(JNIEnv*, jclass, jfieldID)
}

rule{
  spec. void SetStaticDoubleField(JNIEnv*, jclass@isNULLCL, jfieldID@isStaticF, jdouble)
  spec. void SetStaticDoubleField(JNIEnv*@isNULLEnv, #jclass, jfieldID@isStaticF, jdouble)
  type. void SetStaticDoubleField(JNIEnv*, jclass, jfieldID, jdouble)
}

rule{
  spec. void SetStaticFloatField(JNIEnv*, jclass@isNULLCL, jfieldID@isStaticF, jfloat)
  spec. void SetStaticFloatField(JNIEnv*@isNULLEnv, #jclass, jfieldID@isStaticF, jfloat)
  type. void SetStaticFloatField(JNIEnv*, jclass, jfieldID, jfloat)
}

rule{
  spec. void SetStaticLongField(JNIEnv*, jclass@isNULLCL, jfieldID@isStaticF, jlong)
  spec. void SetStaticLongField(JNIEnv*@isNULLEnv, #jclass, jfieldID@isStaticF, jlong)
  type. void SetStaticLongField(JNIEnv*, jclass, jfieldID, jlong)
}

rule{
  spec. void SetStaticIntField(JNIEnv*, jclass@isNULLCL, jfieldID@isStaticF, jint)
  spec. void SetStaticIntField(JNIEnv*@isNULLEnv, #jclass, jfieldID@isStaticF, jint)
  type. void SetStaticIntField(JNIEnv*, jclass, jfieldID, jint)
}

rule{
  spec. void SetStaticShortField(JNIEnv*, jclass@isNULLCL, jfieldID@isStaticF, jshort)
  spec. void SetStaticShortField(JNIEnv*@isNULLEnv, #jclass, jfieldID@isStaticF, jshort)
  type. void SetStaticShortField(JNIEnv*, jclass, jfieldID, jshort)
}

rule{
  spec. void SetStaticCharField(JNIEnv*, jclass@isNULLCL, jfieldID@isStaticF, jchar)
  spec. void SetStaticCharField(JNIEnv*@isNULLEnv, #jclass, jfieldID@isStaticF, jchar)
  type. void SetStaticCharField(JNIEnv*, jclass, jfieldID, jchar)
}

rule{
  spec. void SetStaticByteField(JNIEnv*, jclass@isNULLCL, jfieldID@isStaticF, jbyte)
  spec. void SetStaticByteField(JNIEnv*@isNULLEnv, #jclass, jfieldID@isStaticF, jbyte)
  type. void SetStaticByteField(JNIEnv*, jclass, jfieldID, jbyte)
}

rule{
  spec. void SetStaticBooleanField(JNIEnv*, jclass@isNULLCL, jfieldID@isStaticF, jboolean)
  spec. void SetStaticBooleanField(JNIEnv*@isNULLEnv, #jclass, jfieldID@isStaticF, jboolean)
  type. void SetStaticBooleanField(JNIEnv*, jclass, jfieldID, jboolean)
}

rule{
  spec. void SetStaticObjectField(JNIEnv*, jclass@isNULLCL, jfieldID@isStaticF, jobject)
  spec. void SetStaticObjectField(JNIEnv*@isNULLEnv, #jclass, jfieldID@isStaticF, jobject)
  type. void SetStaticObjectField(JNIEnv*, jclass, jfieldID, jobject)
}

rule{
  spec. jmethodID@(isJBooleanM && isStaticM) || isNULLM GetStaticMethodID(JNIEnv*, #jclass, char*@isMethodNameC, char*@isNULLC)
  spec. jmethodID@(isJBooleanM && isStaticM) || isNULLM GetStaticMethodID(JNIEnv*, #jclass, char*@isNULLC, char*@isMethodSigC && isEndWithZC)
  spec. jmethodID@(isJBooleanM && isStaticM) || isNULLM GetStaticMethodID(JNIEnv*, jclass@isNULLCL, char*@isMethodNameC, char*@isMethodSigC && isEndWithZC)
  spec. jmethodID@(isJBooleanM && isStaticM) || isNULLM GetStaticMethodID(JNIEnv*@isNULLEnv, #jclass, char*@isMethodNameC, char*@isMethodSigC && isEndWithZC)
  type. jmethodID GetStaticMethodID(JNIEnv*, jclass, char*, char*)
}

rule{
  spec. jboolean CallStaticBooleanMethodV(JNIEnv*, jclass@isNULLCL, jmethodID@isJBooleanM && isStaticM && isInThisClassM, va_list)
  spec. jboolean CallStaticBooleanMethodV(JNIEnv*@isNULLEnv, #jclass, jmethodID@isJBooleanM && isStaticM && isInThisClassM, va_list)
  type. jboolean CallStaticBooleanMethodV(JNIEnv*, jclass, jmethodID, va_list)
}

rule{
  spec. jchar CallStaticCharMethodV(JNIEnv*, jclass@isNULLCL, jmethodID@isJCharM && isStaticM && isInThisClassM, va_list)
  spec. jchar CallStaticCharMethodV(JNIEnv*@isNULLEnv, #jclass, jmethodID@isJCharM && isStaticM && isInThisClassM, va_list)
  type. jchar CallStaticCharMethodV(JNIEnv*, jclass, jmethodID, va_list)
}

rule{
  spec. jshort CallStaticShortMethodV(JNIEnv*, jclass@isNULLCL, jmethodID@isJShortM && isStaticM && isInThisClassM, va_list)
  spec. jshort CallStaticShortMethodV(JNIEnv*@isNULLEnv, #jclass, jmethodID@isJShortM && isStaticM && isInThisClassM, va_list)
  type. jshort CallStaticShortMethodV(JNIEnv*, jclass, jmethodID, va_list)
}

rule{
  spec. jint CallStaticIntMethodV(JNIEnv*, jclass@isNULLCL, jmethodID@isJIntM && isStaticM && isInThisClassM, va_list)
  spec. jint CallStaticIntMethodV(JNIEnv*@isNULLEnv, #jclass, jmethodID@isJIntM && isStaticM && isInThisClassM, va_list)
  type. jint CallStaticIntMethodV(JNIEnv*, jclass, jmethodID, va_list)
}

rule{
  spec. jlong CallStaticLongMethodV(JNIEnv*, jclass@isNULLCL, jmethodID@isJLongM && isStaticM && isInThisClassM, va_list)
  spec. jlong CallStaticLongMethodV(JNIEnv*@isNULLEnv, #jclass, jmethodID@isJLongM && isStaticM && isInThisClassM, va_list)
  type. jlong CallStaticLongMethodV(JNIEnv*, jclass, jmethodID, va_list)
}

rule{
  spec. jfloat CallStaticFloatMethodV(JNIEnv*, jclass@isNULLCL, jmethodID@isJFloatM && isStaticM && isInThisClassM, va_list)
  spec. jfloat CallStaticFloatMethodV(JNIEnv*@isNULLEnv, #jclass, jmethodID@isJFloatM && isStaticM && isInThisClassM, va_list)
  type. jfloat CallStaticFloatMethodV(JNIEnv*, jclass, jmethodID, va_list)
}

rule{
  spec. jdouble CallStaticDoubleMethodV(JNIEnv*, jclass@isNULLCL, jmethodID@isJDoubleM && isStaticM && isInThisClassM, va_list)
  spec. jdouble CallStaticDoubleMethodV(JNIEnv*@isNULLEnv, #jclass, jmethodID@isJDoubleM && isStaticM && isInThisClassM, va_list)
  type. jdouble CallStaticDoubleMethodV(JNIEnv*, jclass, jmethodID, va_list)
}

rule{
  spec. jbyte CallStaticByteMethodV(JNIEnv*, jclass@isNULLCL, jmethodID@isJByteM && isStaticM && isInThisClassM, va_list)
  spec. jbyte CallStaticByteMethodV(JNIEnv*@isNULLEnv, #jclass, jmethodID@isJByteM && isStaticM && isInThisClassM, va_list)
  type. jbyte CallStaticByteMethodV(JNIEnv*, jclass, jmethodID, va_list)
}

rule{
  spec. jobject CallStaticObjectMethodV(JNIEnv*, jclass@isNULLCL, jmethodID@isJObjectM && isStaticM && isInThisClassM, va_list)
  spec. jobject CallStaticObjectMethodV(JNIEnv*@isNULLEnv, #jclass, jmethodID@isJObjectM && isStaticM && isInThisClassM, va_list)
  type. jobject CallStaticObjectMethodV(JNIEnv*, jclass, jmethodID, va_list)
}

rule{
  spec. void CallStaticVoidMethodV(JNIEnv*, jclass@isNULLCL, jmethodID@isVoidM && isStaticM && isInThisClassM, va_list)
  spec. void CallStaticVoidMethodV(JNIEnv*@isNULLEnv, #jclass, jmethodID@isVoidM && isStaticM && isInThisClassM, va_list)
  type. void CallStaticVoidMethodV(JNIEnv*, jclass, jmethodID, va_list)
}

rule{
  spec. jboolean CallStaticBooleanMethodA(JNIEnv*, jclass@isNULLCL, jmethodID@isJBooleanM && isStaticM && isInThisClassM, jvalue*@isArrayPtrJV)
  spec. jboolean CallStaticBooleanMethodA(JNIEnv*@isNULLEnv, #jclass, jmethodID@isJBooleanM && isStaticM && isInThisClassM, jvalue*@isArrayPtrJV)
  type. jboolean CallStaticBooleanMethodA(JNIEnv*, jclass, jmethodID, jvalue*)
}

rule{
  spec. jchar CallStaticCharMethodA(JNIEnv*, jclass@isNULLCL, jmethodID@isJCharM && isStaticM && isInThisClassM, jvalue*@isArrayPtrJV)
  spec. jchar CallStaticCharMethodA(JNIEnv*@isNULLEnv, #jclass, jmethodID@isJCharM && isStaticM && isInThisClassM, jvalue*@isArrayPtrJV)
  type. jchar CallStaticCharMethodA(JNIEnv*, jclass, jmethodID, jvalue*)
}

rule{
  spec. jshort CallStaticShortMethodA(JNIEnv*, jclass@isNULLCL, jmethodID@isJShortM && isStaticM && isInThisClassM, jvalue*@isArrayPtrJV)
  spec. jshort CallStaticShortMethodA(JNIEnv*@isNULLEnv, #jclass, jmethodID@isJShortM && isStaticM && isInThisClassM, jvalue*@isArrayPtrJV)
  type. jshort CallStaticShortMethodA(JNIEnv*, jclass, jmethodID, jvalue*)
}

rule{
  spec. jint CallStaticIntMethodA(JNIEnv*, jclass@isNULLCL, jmethodID@isJIntM && isStaticM && isInThisClassM, jvalue*@isArrayPtrJV)
  spec. jint CallStaticIntMethodA(JNIEnv*@isNULLEnv, #jclass, jmethodID@isJIntM && isStaticM && isInThisClassM, jvalue*@isArrayPtrJV)
  type. jint CallStaticIntMethodA(JNIEnv*, jclass, jmethodID, jvalue*)
}

rule{
  spec. jlong CallStaticLongMethodA(JNIEnv*, jclass@isNULLCL, jmethodID@isJLongM && isStaticM && isInThisClassM, jvalue*@isArrayPtrJV)
  spec. jlong CallStaticLongMethodA(JNIEnv*@isNULLEnv, #jclass, jmethodID@isJLongM && isStaticM && isInThisClassM, jvalue*@isArrayPtrJV)
  type. jlong CallStaticLongMethodA(JNIEnv*, jclass, jmethodID, jvalue*)
}

rule{
  spec. jfloat CallStaticFloatMethodA(JNIEnv*, jclass@isNULLCL, jmethodID@isJFloatM && isStaticM && isInThisClassM, jvalue*@isArrayPtrJV)
  spec. jfloat CallStaticFloatMethodA(JNIEnv*@isNULLEnv, #jclass, jmethodID@isJFloatM && isStaticM && isInThisClassM, jvalue*@isArrayPtrJV)
  type. jfloat CallStaticFloatMethodA(JNIEnv*, jclass, jmethodID, jvalue*)
}

rule{
  spec. jdouble CallStaticDoubleMethodA(JNIEnv*, jclass@isNULLCL, jmethodID@isJDoubleM && isStaticM && isInThisClassM, jvalue*@isArrayPtrJV)
  spec. jdouble CallStaticDoubleMethodA(JNIEnv*@isNULLEnv, #jclass, jmethodID@isJDoubleM && isStaticM && isInThisClassM, jvalue*@isArrayPtrJV)
  type. jdouble CallStaticDoubleMethodA(JNIEnv*, jclass, jmethodID, jvalue*)
}

rule{
  spec. jbyte CallStaticByteMethodA(JNIEnv*, jclass@isNULLCL, jmethodID@isJByteM && isStaticM && isInThisClassM, jvalue*@isArrayPtrJV)
  spec. jbyte CallStaticByteMethodA(JNIEnv*@isNULLEnv, #jclass, jmethodID@isJByteM && isStaticM && isInThisClassM, jvalue*@isArrayPtrJV)
  type. jbyte CallStaticByteMethodA(JNIEnv*, jclass, jmethodID, jvalue*)
}

rule{
  spec. jobject CallStaticObjectMethodA(JNIEnv*, jclass@isNULLCL, jmethodID@isJObjectM && isStaticM && isInThisClassM, jvalue*@isArrayPtrJV)
  spec. jobject CallStaticObjectMethodA(JNIEnv*@isNULLEnv, #jclass, jmethodID@isJObjectM && isStaticM && isInThisClassM, jvalue*@isArrayPtrJV)
  type. jobject CallStaticObjectMethodA(JNIEnv*, jclass, jmethodID, jvalue*)
}

rule{
  spec. void CallStaticVoidMethodA(JNIEnv*, jclass@isNULLCL, jmethodID@isVoidM && isStaticM && isInThisClassM, jvalue*@isArrayPtrJV)
  spec. void CallStaticVoidMethodA(JNIEnv*@isNULLEnv, #jclass, jmethodID@isVoidM && isStaticM && isInThisClassM, jvalue*@isArrayPtrJV)
  type. void CallStaticVoidMethodA(JNIEnv*, jclass, jmethodID, jvalue*)
}

rule{
  spec. jboolean CallStaticBooleanMethod(JNIEnv*, jclass@isNULLCL, jmethodID@isJBooleanM && isStaticM && isInThisClassM, ...)
  spec. jboolean CallStaticBooleanMethod(JNIEnv*@isNULLEnv, #jclass, jmethodID@isJBooleanM && isStaticM && isInThisClassM, ...)
  type. jboolean CallStaticBooleanMethod(JNIEnv*, jclass, jmethodID, ...)
}

rule{
  spec. jchar CallStaticCharMethod(JNIEnv*, jclass@isNULLCL, jmethodID@isJCharM && isStaticM && isInThisClassM, ...)
  spec. jchar CallStaticCharMethod(JNIEnv*@isNULLEnv, #jclass, jmethodID@isJCharM && isStaticM && isInThisClassM, ...)
  type. jchar CallStaticCharMethod(JNIEnv*, jclass, jmethodID, ...)
}

rule{
  spec. jshort CallStaticShortMethod(JNIEnv*, jclass@isNULLCL, jmethodID@isJShortM && isStaticM && isInThisClassM, ...)
  spec. jshort CallStaticShortMethod(JNIEnv*@isNULLEnv, #jclass, jmethodID@isJShortM && isStaticM && isInThisClassM, ...)
  type. jshort CallStaticShortMethod(JNIEnv*, jclass, jmethodID, ...)
}

rule{
  spec. jint CallStaticIntMethod(JNIEnv*, jclass@isNULLCL, jmethodID@isJIntM && isStaticM && isInThisClassM, ...)
  spec. jint CallStaticIntMethod(JNIEnv*@isNULLEnv, #jclass, jmethodID@isJIntM && isStaticM && isInThisClassM, ...)
  type. jint CallStaticIntMethod(JNIEnv*, jclass, jmethodID, ...)
}

rule{
  spec. jlong CallStaticLongMethod(JNIEnv*, jclass@isNULLCL, jmethodID@isJLongM && isStaticM && isInThisClassM, ...)
  spec. jlong CallStaticLongMethod(JNIEnv*@isNULLEnv, #jclass, jmethodID@isJLongM && isStaticM && isInThisClassM, ...)
  type. jlong CallStaticLongMethod(JNIEnv*, jclass, jmethodID, ...)
}

rule{
  spec. jfloat CallStaticFloatMethod(JNIEnv*, jclass@isNULLCL, jmethodID@isJFloatM && isStaticM && isInThisClassM, ...)
  spec. jfloat CallStaticFloatMethod(JNIEnv*@isNULLEnv, #jclass, jmethodID@isJFloatM && isStaticM && isInThisClassM, ...)
  type. jfloat CallStaticFloatMethod(JNIEnv*, jclass, jmethodID, ...)
}

rule{
  spec. jdouble CallStaticDoubleMethod(JNIEnv*, jclass@isNULLCL, jmethodID@isJDoubleM && isStaticM && isInThisClassM, ...)
  spec. jdouble CallStaticDoubleMethod(JNIEnv*@isNULLEnv, #jclass, jmethodID@isJDoubleM && isStaticM && isInThisClassM, ...)
  type. jdouble CallStaticDoubleMethod(JNIEnv*, jclass, jmethodID, ...)
}

rule{
  spec. jbyte CallStaticByteMethod(JNIEnv*, jclass@isNULLCL, jmethodID@isJByteM && isStaticM && isInThisClassM, ...)
  spec. jbyte CallStaticByteMethod(JNIEnv*@isNULLEnv, #jclass, jmethodID@isJByteM && isStaticM && isInThisClassM, ...)
  type. jbyte CallStaticByteMethod(JNIEnv*, jclass, jmethodID, ...)
}

rule{
  spec. jobject CallStaticObjectMethod(JNIEnv*, jclass@isNULLCL, jmethodID@isJObjectM && isStaticM && isInThisClassM, ...)
  spec. jobject CallStaticObjectMethod(JNIEnv*@isNULLEnv, #jclass, jmethodID@isJObjectM && isStaticM && isInThisClassM, ...)
  type. jobject CallStaticObjectMethod(JNIEnv*, jclass, jmethodID, ...)
}

rule{
  spec. void CallStaticVoidMethod(JNIEnv*, jclass@isNULLCL, jmethodID@isVoidM && isStaticM && isInThisClassM, ...)
  spec. void CallStaticVoidMethod(JNIEnv*@isNULLEnv, #jclass, jmethodID@isVoidM && isStaticM && isInThisClassM, ...)
  type. void CallStaticVoidMethod(JNIEnv*, jclass, jmethodID, ...)
}

rule{
  spec. jstring@!isNULLS || isNULLS NewString(JNIEnv*@isNULLEnv, jchar*@isUnicodeJC, jsize)
  type. jstring NewString(JNIEnv*, jchar*, jsize)
}

rule{
  spec. jsize GetStringLength(JNIEnv*, jstring@isNULLS) 
  spec. jsize GetStringLength(JNIEnv*@isNULLEnv, jstring@isUnicodeS) 
  type. jsize GetStringLength(JNIEnv*, jstring) 
}

rule{
  spec. jchar*@isGetStringCharsJC && isUnicodeJC || isNULLJC GetStringChars(JNIEnv*, jstring@isNULLS, jboolean*@isNULLJB || !isNULLJB)
  spec. jchar*@isGetStringCharsJC && isUnicodeJC || isNULLJC GetStringChars(JNIEnv*@isNULLEnv, jstring, jboolean*@isNULLJB || !isNULLJB)
  type. jchar* GetStringChars(JNIEnv*, jstring, jboolean*)
}

rule{
  spec. void ReleaseStringChars(JNIEnv*, jstring, jchar*@!isGetStringCharsJC && isUnicodeJC)
  spec. void ReleaseStringChars(JNIEnv*, jstring@isNULLS, jchar*@isGetStringCharsJC && isUnicodeJC)
  spec. void ReleaseStringChars(JNIEnv*@isNULLEnv, jstring, jchar*@isGetStringCharsJC && isUnicodeJC)
  type. void ReleaseStringChars(JNIEnv*, jstring, jchar*)
}

rule{
  spec. jstring@!isNULLS || isNULLS NewStringUTF(JNIEnv*, char*@isNULLC) 
  spec. jstring@!isNULLS || isNULLS NewStringUTF(JNIEnv*@isNULLEnv, char*@isUTF8C) 
  type. jstring NewStringUTF(JNIEnv*, char*) 
}

rule{
  spec. jsize GetStringUTFLength(JNIEnv*, jstring@isNULLS)
  spec. jsize GetStringUTFLength(JNIEnv*@isNULLEnv, jstring)
  type. jsize GetStringUTFLength(JNIEnv*, jstring)
}

rule{
  spec. char*@(isGetStringUTFCharC && isUTF8C) || isNULLC GetStringUTFChars(JNIEnv*, jstring@isNULLS, jboolean*@!isNULLJB)
  spec. char*@(isGetStringUTFCharC && isUTF8C) || isNULLC GetStringUTFChars(JNIEnv*@isNULLEnv, jstring, jboolean*@!isNULLJB)
  type. char* GetStringUTFChars(JNIEnv*, jstring, jboolean*)
}

rule{
  spec. void ReleaseStringUTFChars(JNIEnv*, jstring, char*@!isGetStringUTFCharC && isUTF8C)
  spec. void ReleaseStringUTFChars(JNIEnv*, jstring@isNULLS, char*@isGetStringUTFCharC && isUTF8C)
  spec. void ReleaseStringUTFChars(JNIEnv*@isNULLEnv, jstring, char*@isGetStringUTFCharC && isUTF8C)
  type. void ReleaseStringUTFChars(JNIEnv*, jstring, char*)
}

rule{
  spec. void GetStringRegion(JNIEnv*, jstring@isUnicodeS, jsize@isValidIndexE, jsize@isPositiveE, jchar*@isNULLJC) 
  spec. void GetStringRegion(JNIEnv*, jstring@isUnicodeS, jsize@isValidIndexE, jsize@isNegativeE, jchar*@isUnicodeJC && !isNULLJC) 
  spec. void GetStringRegion(JNIEnv*, jstring@isUnicodeS, jsize@isNegativeE, jsize@isValidIndexE, jchar*@isUnicodeJC && !isNULLJC) 
  spec. void GetStringRegion(JNIEnv*, jstring@isNULLS, jsize@isValidIndexE, jsize@isValidIndexE, jchar*@isUnicodeJC && !isNULLJC) 
  spec. void GetStringRegion(JNIEnv*@isNULLEnv, jstring@isUnicodeS, jsize@isValidIndexE, jsize@isValidIndexE, jchar*@isUnicodeJC && !isNULLJC) 
  type. void GetStringRegion(JNIEnv*, jstring, jsize, jsize, jchar*) 
}

rule{
  spec. void GetStringUTFRegion(JNIEnv*, jstring@isUnicodeS, jsize@isValidIndexE, jsize@isPositiveE, char*@isNULLC) 
  spec. void GetStringUTFRegion(JNIEnv*, jstring@isUnicodeS, jsize@isValidIndexE, jsize@isNegativeE, char*@isUTF8C && isNULLC) 
  spec. void GetStringUTFRegion(JNIEnv*, jstring@isUnicodeS, jsize@isNegativeE, jsize@isValidIndexE, char*@isUTF8C && isNULLC) 
  spec. void GetStringUTFRegion(JNIEnv*, jstring@isNULLS, jsize@isValidIndexE, jsize@isValidIndexE, char*@isUTF8C && isNULLC) 
  spec. void GetStringUTFRegion(JNIEnv*@isNULLEnv, jstring@isUnicodeS, jsize@isValidIndexE, jsize@isValidIndexE, char*@isUTF8C && isNULLC) 
  type. void GetStringUTFRegion(JNIEnv*, jstring, jsize, jsize, char*) 
}

rule{
  spec. jchar*@(isGetStringCriticalJC && isUnicodeJC) || isNULLJC GetStringCritical(JNIEnv*, jstring@isNULLS, jboolean*@!isNULLJB) 
  spec. jchar*@(isGetStringCriticalJC && isUnicodeJC) || isNULLJC GetStringCritical(JNIEnv*@isNULLEnv, jstring, jboolean*@!isNULLJB) 
  type. jchar* GetStringCritical(JNIEnv*, jstring, jboolean*) 
}

rule{
  spec. void ReleaseStringCritical(JNIEnv*, jstring, jchar*@!isGetStringCriticalJC && isUnicodeJC)
  spec. void ReleaseStringCritical(JNIEnv*, jstring@isNULLS, jchar*@isGetStringCriticalJC && isUnicodeJC)
  spec. void ReleaseStringCritical(JNIEnv*@isNULLEnv, jstring, jchar*@isGetStringCriticalJC && isUnicodeJC)
  type. void ReleaseStringCritical(JNIEnv*, jstring, jchar*)
}

rule{
  spec. jsize GetArrayLength(JNIEnv*, jarray@isNULLJA) 
  spec. jsize GetArrayLength(JNIEnv*@isNULLEnv, #jarray) 
  type. jsize GetArrayLength(JNIEnv*, jarray) 
}

rule{
  spec. jobjectArray@isNULLJOA || !isNULLJOA  NewObjectArray(JNIEnv*, jsize@isPositiveE, jclass@isNULLCL, jobject) 
  spec. jobjectArray@isNULLJOA || !isNULLJOA  NewObjectArray(JNIEnv*, jsize@isNegativeE, jclass, jobject) 
  spec. jobjectArray@isNULLJOA || !isNULLJOA  NewObjectArray(JNIEnv*@isNULLEnv, jsize@isPositiveE, jclass, jobject) 
  type. jobjectArray NewObjectArray(JNIEnv*, jsize, jclass, jobject) 
}

rule{
  spec. jobject GetObjectArrayElement(JNIEnv*, jobjectArray, jsize@isNegativeE)
  spec. jobject GetObjectArrayElement(JNIEnv*, jobjectArray@isNULLJOA, jsize)
  spec. jobject GetObjectArrayElement(JNIEnv*@isNULLEnv, jobjectArray, jsize)
  type. jobject GetObjectArrayElement(JNIEnv*, jobjectArray, jsize)
}

rule{
  spec. void SetObjectArrayElement(JNIEnv*, jobjectArray, jsize@isNegativeE, jobject@isSubClassO) 
  spec. void SetObjectArrayElement(JNIEnv*, jobjectArray@isNULLJOA, jsize@isValidIndexE, jobject@isSubClassO) 
  spec. void SetObjectArrayElement(JNIEnv*@isNULLEnv, jobjectArray, jsize@isValidIndexE, jobject@isSubClassO) 
  type. void SetObjectArrayElement(JNIEnv*, jobjectArray, jsize, jobject) 
}

rule{
  spec. jdoubleArray@isNULLJDA || !isNULLJDA NewDoubleArray(JNIEnv*, jsize@isNegativeE) 
  spec. jdoubleArray@isNULLJDA || !isNULLJDA NewDoubleArray(JNIEnv*@isNULLEnv, jsize@isPositiveE) 
  type. jdoubleArray NewDoubleArray(JNIEnv*, jsize) 
}

rule{
  spec. jfloatArray@isNULLJFA || !isNULLJFA NewFloatArray(JNIEnv*, jsize@isNegativeE) 
  spec. jfloatArray@isNULLJFA || !isNULLJFA NewFloatArray(JNIEnv*@isNULLEnv, jsize@isPositiveE) 
  type. jfloatArray NewFloatArray(JNIEnv*, jsize) 
}

rule{
  spec. jlongArray@isNULLJLA || !isNULLJLA NewLongArray(JNIEnv*, jsize@isNegativeE) 
  spec. jlongArray@isNULLJLA || !isNULLJLA NewLongArray(JNIEnv*@isNULLEnv, jsize@isPositiveE) 
  type. jlongArray NewLongArray(JNIEnv*, jsize) 
}

rule{
  spec. jintArray@isNULLJIA || !isNULLJIA NewIntArray(JNIEnv*, jsize@isNegativeE) 
  spec. jintArray@isNULLJIA || !isNULLJIA NewIntArray(JNIEnv*@isNULLEnv, jsize@isPositiveE) 
  type. jintArray NewIntArray(JNIEnv*, jsize) 
}

rule{
  spec. jshortArray@isNULLJSA || !isNULLJSA  NewShortArray(JNIEnv*, jsize@isNegativeE) 
  spec. jshortArray@isNULLJSA || !isNULLJSA  NewShortArray(JNIEnv*@isNULLEnv, jsize@isPositiveE) 
  type. jshortArray NewShortArray(JNIEnv*, jsize) 
}

rule{
  spec. jcharArray@isNULLJCA || !isNULLJCA NewCharArray(JNIEnv*, jsize@isNegativeE) 
  spec. jcharArray@isNULLJCA || !isNULLJCA NewCharArray(JNIEnv*@isNULLEnv, jsize@isPositiveE) 
  type. jcharArray NewCharArray(JNIEnv*, jsize) 
}

rule{
  spec. jbyteArray@isNULLJBA || !isNULLJBA NewByteArray(JNIEnv*, jsize@isNegativeE) 
  spec. jbyteArray@isNULLJBA || !isNULLJBA NewByteArray(JNIEnv*@isNULLEnv, jsize@isPositiveE) 
  type. jbyteArray  NewByteArray(JNIEnv*, jsize) 
}

rule{
  spec. jbooleanArray@isNULLJZA || !isNULLJZA NewBooleanArray(JNIEnv*, jsize@isNegativeE) 
  spec. jbooleanArray@isNULLJZA || !isNULLJZA NewBooleanArray(JNIEnv*@isNULLEnv, jsize@isPositiveE) 
  type. jbooleanArray NewBooleanArray(JNIEnv*, jsize) 
}

rule{
  spec. jdouble*@isGetDoubleArrayElements || isNULLJD GetDoubleArrayElements(JNIEnv*, jdoubleArray@isNULLJDA, jboolean*)
  spec. jdouble*@isGetDoubleArrayElements || isNULLJD GetDoubleArrayElements(JNIEnv*@isNULLEnv, jdoubleArray, jboolean*)
  type. jdouble* GetDoubleArrayElements(JNIEnv*, jdoubleArray, jboolean*)
}

rule{
  spec. jfloat*@isGetFloatArrayElements || isNULLJF GetFloatArrayElements(JNIEnv*, jfloatArray@isNULLJFA, jboolean*)
  spec. jfloat*@isGetFloatArrayElements || isNULLJF GetFloatArrayElements(JNIEnv*@isNULLEnv, jfloatArray, jboolean*)
  type. jfloat* GetFloatArrayElements(JNIEnv*, jfloatArray, jboolean*)
}

rule{
  spec. jlong*@isGetLongArrayElements || isNULLJL GetLongArrayElements(JNIEnv*, jlongArray@isNULLJLA, jboolean*)
  spec. jlong*@isGetLongArrayElements || isNULLJL GetLongArrayElements(JNIEnv*@isNULLEnv, jlongArray, jboolean*)
  type. jlong* GetLongArrayElements(JNIEnv*, jlongArray, jboolean*)
}

rule{
  spec. jint*@isGetIntArrayElements || isNULLJI GetIntArrayElements(JNIEnv*, jintArray@isNULLJIA, jboolean*)
  spec. jint*@isGetIntArrayElements || isNULLJI GetIntArrayElements(JNIEnv*@isNULLEnv, jintArray, jboolean*)
  type. jint* GetIntArrayElements(JNIEnv*, jintArray, jboolean*)
}

rule{
  spec. jshort*@isGetShortArrayElements || isNULLJS GetShortArrayElements(JNIEnv*, jshortArray@isNULLJSA, jboolean*)
  spec. jshort*@isGetShortArrayElements || isNULLJS GetShortArrayElements(JNIEnv*@isNULLEnv, jshortArray, jboolean*)
  type. jshort* GetShortArrayElements(JNIEnv*, jshortArray, jboolean*)
}

rule{
  spec. jchar*@isGetCharArrayElementsJC || isNULLJC GetCharArrayElements(JNIEnv*, jcharArray@isNULLJCA, jboolean*)
  spec. jchar*@isGetCharArrayElementsJC || isNULLJC GetCharArrayElements(JNIEnv*@isNULLEnv, jcharArray, jboolean*)
  type. jchar* GetCharArrayElements(JNIEnv*, jcharArray, jboolean*)
}

rule{
  spec. jbyte*@(isGetByteArrayElements) || isNULLB GetByteArrayElements(JNIEnv*, jbyteArray@isNULLJBA, jboolean*)
  spec. jbyte*@(isGetByteArrayElements) || isNULLB GetByteArrayElements(JNIEnv*@isNULLEnv, jbyteArray, jboolean*)
  type. jbyte* GetByteArrayElements(JNIEnv*, jbyteArray, jboolean*)
}

rule{
  spec. jboolean*@isGetBooleanArrayElements || isNULLJB GetBooleanArrayElements(JNIEnv*, jbooleanArray@isNULLJZA, jboolean*)
  spec. jboolean*@isGetBooleanArrayElements || isNULLJB GetBooleanArrayElements(JNIEnv*@isNULLEnv, jbooleanArray, jboolean*)
  type. jboolean* GetBooleanArrayElements(JNIEnv*, jbooleanArray, jboolean*)
}

rule{
  spec. void ReleaseDoubleArrayElements(JNIEnv*, jdoubleArray, jdouble*@isGetDoubleArrayElements && isThisDoubleArray, jint@isNegativeJI)
  spec. void ReleaseDoubleArrayElements(JNIEnv*, jdoubleArray, jdouble*@!isGetDoubleArrayElements, jint@isZeroJI || isJNI_COMMITJI || isJNI_ABORTJI)
  spec. void ReleaseDoubleArrayElements(JNIEnv*, jdoubleArray@isNULLJDA, jdouble*@isGetDoubleArrayElements && isThisDoubleArray, jint@isZeroJI || isJNI_COMMITJI || isJNI_ABORTJI)
  spec. void ReleaseDoubleArrayElements(JNIEnv*@isNULLEnv, jdoubleArray, jdouble*@isGetDoubleArrayElements && isThisDoubleArray, jint@isZeroJI || isJNI_COMMITJI || isJNI_ABORTJI)
  type. void ReleaseDoubleArrayElements(JNIEnv*, jdoubleArray, jdouble*, jint) 
}

rule{
  spec. void ReleaseFloatArrayElements(JNIEnv*, jfloatArray, jfloat*@isGetFloatArrayElements && isThisFloatArray, jint@isNegativeJI)
  spec. void ReleaseFloatArrayElements(JNIEnv*, jfloatArray, jfloat*@!isGetFloatArrayElements, jint@isZeroJI || isJNI_COMMITJI || isJNI_ABORTJI)
  spec. void ReleaseFloatArrayElements(JNIEnv*, jfloatArray@isNULLJFA, jfloat*@isGetFloatArrayElements && isThisFloatArray, jint@isZeroJI || isJNI_COMMITJI || isJNI_ABORTJI)
  spec. void ReleaseFloatArrayElements(JNIEnv*@isNULLEnv, jfloatArray, jfloat*@isGetFloatArrayElements && isThisFloatArray, jint@isZeroJI || isJNI_COMMITJI || isJNI_ABORTJI)
  type. void ReleaseFloatArrayElements(JNIEnv*, jfloatArray, jfloat*, jint) 
}

rule{
  spec. void ReleaseLongArrayElements(JNIEnv*, jlongArray, jlong*@isGetLongArrayElements && isThisLongArray, jint@isNegativeJI)
  spec. void ReleaseLongArrayElements(JNIEnv*, jlongArray, jlong*@!isGetLongArrayElements, jint@isZeroJI || isJNI_COMMITJI || isJNI_ABORTJI)
  spec. void ReleaseLongArrayElements(JNIEnv*, jlongArray@isNULLJLA, jlong*@isGetLongArrayElements && isThisLongArray, jint@isZeroJI || isJNI_COMMITJI || isJNI_ABORTJI)
  spec. void ReleaseLongArrayElements(JNIEnv*@isNULLEnv, jlongArray, jlong*@isGetLongArrayElements && isThisLongArray, jint@isZeroJI || isJNI_COMMITJI || isJNI_ABORTJI)
  type. void ReleaseLongArrayElements(JNIEnv*, jlongArray, jlong*, jint) 
}

rule{
  spec. void ReleaseIntArrayElements(JNIEnv*, jintArray, jint*@isGetIntArrayElements && isThisIntArray, jint@isNegativeJI)
  spec. void ReleaseIntArrayElements(JNIEnv*, jintArray, jint*@!isGetIntArrayElements, jint@isZeroJI || isJNI_COMMITJI || isJNI_ABORTJI)
  spec. void ReleaseIntArrayElements(JNIEnv*, jintArray@isNULLJIA, jint*@isGetIntArrayElements && isThisIntArray, jint@isZeroJI || isJNI_COMMITJI || isJNI_ABORTJI)
  spec. void ReleaseIntArrayElements(JNIEnv*@isNULLEnv, jintArray, jint*@isGetIntArrayElements && isThisIntArray, jint@isZeroJI || isJNI_COMMITJI || isJNI_ABORTJI)
  type. void ReleaseIntArrayElements(JNIEnv*, jintArray, jint*, jint) 
}

rule{
  spec. void ReleaseShortArrayElements(JNIEnv*, jshortArray, jshort*@isGetShortArrayElements && isThisShortArray, jint@isNegativeJI)
  spec. void ReleaseShortArrayElements(JNIEnv*, jshortArray, jshort*@!isGetShortArrayElements, jint@isZeroJI || isJNI_COMMITJI || isJNI_ABORTJI)
  spec. void ReleaseShortArrayElements(JNIEnv*, jshortArray@isNULLJSA, jshort*@isGetShortArrayElements && isThisShortArray, jint@isZeroJI || isJNI_COMMITJI || isJNI_ABORTJI)
  spec. void ReleaseShortArrayElements(JNIEnv*@isNULLEnv, jshortArray, jshort*@isGetShortArrayElements && isThisShortArray, jint@isZeroJI || isJNI_COMMITJI || isJNI_ABORTJI)
  type. void ReleaseShortArrayElements(JNIEnv*, jshortArray, jshort*, jint) 
}

rule{
  spec. void ReleaseCharArrayElements(JNIEnv*, jcharArray, jchar*@isGetCharArrayElementsJC && isThisCharArray, jint@isNegativeJI)
  spec. void ReleaseCharArrayElements(JNIEnv*, jcharArray, jchar*@!isGetCharArrayElementsJC, jint@isZeroJI || isJNI_COMMITJI || isJNI_ABORTJI)
  spec. void ReleaseCharArrayElements(JNIEnv*, jcharArray@isNULLJCA, jchar*@isGetCharArrayElementsJC && isThisCharArray, jint@isZeroJI || isJNI_COMMITJI || isJNI_ABORTJI)
  spec. void ReleaseCharArrayElements(JNIEnv*@isNULLEnv, jcharArray, jchar*@isGetCharArrayElementsJC && isThisCharArray, jint@isZeroJI || isJNI_COMMITJI || isJNI_ABORTJI)
  type. void ReleaseCharArrayElements(JNIEnv*, jcharArray, jchar*, jint) 
}

rule{
  spec. void ReleaseByteArrayElements(JNIEnv*, jbyteArray, jbyte*@isGetByteArrayElements && isThisByteArray, jint@isNegativeJI)
  spec. void ReleaseByteArrayElements(JNIEnv*, jbyteArray, jbyte*@!isGetByteArrayElements, jint@isZeroJI || isJNI_COMMITJI || isJNI_ABORTJI)
  spec. void ReleaseByteArrayElements(JNIEnv*, jbyteArray@isNULLJBA, jbyte*@isGetByteArrayElements && isThisByteArray, jint@isZeroJI || isJNI_COMMITJI || isJNI_ABORTJI)
  spec. void ReleaseByteArrayElements(JNIEnv*@isNULLEnv, jbyteArray, jbyte*@isGetByteArrayElements && isThisByteArray, jint@isZeroJI || isJNI_COMMITJI || isJNI_ABORTJI)
  type. void ReleaseByteArrayElements(JNIEnv*, jbyteArray, jbyte*, jint) 
}

rule{
  spec. void ReleaseBooleanArrayElements(JNIEnv*, jbooleanArray, jboolean*@isGetBooleanArrayElements && isThisBooleanArray, jint@isNegativeJI)
  spec. void ReleaseBooleanArrayElements(JNIEnv*, jbooleanArray, jboolean*@!isGetBooleanArrayElements, jint@isZeroJI || isJNI_COMMITJI || isJNI_ABORTJI)
  spec. void ReleaseBooleanArrayElements(JNIEnv*, jbooleanArray@isNULLJZA, jboolean*@isGetBooleanArrayElements && isThisBooleanArray, jint@isZeroJI || isJNI_COMMITJI || isJNI_ABORTJI)
  spec. void ReleaseBooleanArrayElements(JNIEnv*@isNULLEnv, jbooleanArray, jboolean*@isGetBooleanArrayElements && isThisBooleanArray, jint@isZeroJI || isJNI_COMMITJI || isJNI_ABORTJI)
  type. void ReleaseBooleanArrayElements(JNIEnv*, jbooleanArray, jboolean*, jint) 
}

rule{
  spec. void GetDoubleArrayRegion(JNIEnv*, jdoubleArray, jsize@isValidIndexE, jsize@isValidIndexE, jdouble*@isNULLJD) 
  spec. void GetDoubleArrayRegion(JNIEnv*, jdoubleArray, jsize@isValidIndexE, jsize@isNegativeE, jdouble*) 
  spec. void GetDoubleArrayRegion(JNIEnv*, jdoubleArray, jsize@isNegativeE, jsize@isValidIndexE, jdouble*) 
  spec. void GetDoubleArrayRegion(JNIEnv*, jdoubleArray@isNULLJDA, jsize@isValidIndexE, jsize@isValidIndexE, jdouble*) 
  spec. void GetDoubleArrayRegion(JNIEnv*@isNULLEnv, jdoubleArray, jsize@isValidIndexE, jsize@isValidIndexE, jdouble*) 
  type. void GetDoubleArrayRegion(JNIEnv*, jdoubleArray, jsize, jsize, jdouble*) 
}

rule{
  spec. void GetFloatArrayRegion(JNIEnv*, jfloatArray, jsize@isValidIndexE, jsize@isValidIndexE, jfloat*@isNULLJF) 
  spec. void GetFloatArrayRegion(JNIEnv*, jfloatArray, jsize@isValidIndexE, jsize@isNegativeE, jfloat*) 
  spec. void GetFloatArrayRegion(JNIEnv*, jfloatArray, jsize@isNegativeE, jsize@isValidIndexE, jfloat*) 
  spec. void GetFloatArrayRegion(JNIEnv*, jfloatArray@isNULLJFA, jsize@isValidIndexE, jsize@isValidIndexE, jfloat*) 
  spec. void GetFloatArrayRegion(JNIEnv*@isNULLEnv, jfloatArray, jsize@isValidIndexE, jsize@isValidIndexE, jfloat*) 
  type. void GetFloatArrayRegion(JNIEnv*, jfloatArray, jsize, jsize, jfloat*) 
}

rule{
  spec. void GetLongArrayRegion(JNIEnv*, jlongArray, jsize@isValidIndexE, jsize@isValidIndexE, jlong*@isNULLJL) 
  spec. void GetLongArrayRegion(JNIEnv*, jlongArray, jsize@isValidIndexE, jsize@isNegativeE, jlong*) 
  spec. void GetLongArrayRegion(JNIEnv*, jlongArray, jsize@isNegativeE, jsize@isValidIndexE, jlong*) 
  spec. void GetLongArrayRegion(JNIEnv*, jlongArray@isNULLJLA, jsize@isValidIndexE, jsize@isValidIndexE, jlong*) 
  spec. void GetLongArrayRegion(JNIEnv*@isNULLEnv, jlongArray, jsize@isValidIndexE, jsize@isValidIndexE, jlong*) 
  type. void GetLongArrayRegion(JNIEnv*, jlongArray, jsize, jsize, jlong*) 
}

rule{
  spec. void GetIntArrayRegion(JNIEnv*, jintArray, jsize@isValidIndexE, jsize@isValidIndexE, jint*@isNULLJI) 
  spec. void GetIntArrayRegion(JNIEnv*, jintArray, jsize@isValidIndexE, jsize@isNegativeE, jint*) 
  spec. void GetIntArrayRegion(JNIEnv*, jintArray, jsize@isNegativeE, jsize@isValidIndexE, jint*) 
  spec. void GetIntArrayRegion(JNIEnv*, jintArray@isNULLJIA, jsize@isValidIndexE, jsize@isValidIndexE, jint*) 
  spec. void GetIntArrayRegion(JNIEnv*@isNULLEnv, jintArray, jsize@isValidIndexE, jsize@isValidIndexE, jint*) 
  type. void GetIntArrayRegion(JNIEnv*, jintArray, jsize, jsize, jint*) 
}

rule{
  spec. void GetShortArrayRegion(JNIEnv*, jshortArray, jsize@isValidIndexE, jsize@isValidIndexE, jshort*@isNULLJS) 
  spec. void GetShortArrayRegion(JNIEnv*, jshortArray, jsize@isValidIndexE, jsize@isNegativeE, jshort*) 
  spec. void GetShortArrayRegion(JNIEnv*, jshortArray, jsize@isNegativeE, jsize@isValidIndexE, jshort*) 
  spec. void GetShortArrayRegion(JNIEnv*, jshortArray@isNULLJSA, jsize@isValidIndexE, jsize@isValidIndexE, jshort*) 
  spec. void GetShortArrayRegion(JNIEnv*@isNULLEnv, jshortArray, jsize@isValidIndexE, jsize@isValidIndexE, jshort*) 
  type. void GetShortArrayRegion(JNIEnv*, jshortArray, jsize, jsize, jshort*) 
}

rule{
  spec. void GetCharArrayRegion(JNIEnv*, jcharArray, jsize@isValidIndexE, jsize@isValidIndexE, jchar*@isNULLJC) 
  spec. void GetCharArrayRegion(JNIEnv*, jcharArray, jsize@isValidIndexE, jsize@isNegativeE, jchar*) 
  spec. void GetCharArrayRegion(JNIEnv*, jcharArray, jsize@isNegativeE, jsize@isValidIndexE, jchar*) 
  spec. void GetCharArrayRegion(JNIEnv*, jcharArray@isNULLJCA, jsize@isValidIndexE, jsize@isValidIndexE, jchar*) 
  spec. void GetCharArrayRegion(JNIEnv*@isNULLEnv, jcharArray, jsize@isValidIndexE, jsize@isValidIndexE, jchar*) 
  type. void GetCharArrayRegion(JNIEnv*, jcharArray, jsize, jsize, jchar*) 
}

rule{
  spec. void GetByteArrayRegion(JNIEnv*, jbyteArray, jsize@isValidIndexE, jsize@isValidIndexE, jbyte*@isNULLB) 
  spec. void GetByteArrayRegion(JNIEnv*, jbyteArray, jsize@isValidIndexE, jsize@isNegativeE, jbyte*) 
  spec. void GetByteArrayRegion(JNIEnv*, jbyteArray, jsize@isNegativeE, jsize@isValidIndexE, jbyte*) 
  spec. void GetByteArrayRegion(JNIEnv*, jbyteArray@isNULLJBA, jsize@isValidIndexE, jsize@isValidIndexE, jbyte*) 
  spec. void GetByteArrayRegion(JNIEnv*@isNULLEnv, jbyteArray, jsize@isValidIndexE, jsize@isValidIndexE, jbyte*) 
  type. void GetByteArrayRegion(JNIEnv*, jbyteArray, jsize, jsize, jbyte*) 
}

rule{
  spec. void GetBooleanArrayRegion(JNIEnv*, jbooleanArray, jsize@isValidIndexE, jsize@isValidIndexE, jboolean*@isNULLJB) 
  spec. void GetBooleanArrayRegion(JNIEnv*, jbooleanArray, jsize@isValidIndexE, jsize@isNegativeE, jboolean*) 
  spec. void GetBooleanArrayRegion(JNIEnv*, jbooleanArray, jsize@isNegativeE, jsize@isValidIndexE, jboolean*) 
  spec. void GetBooleanArrayRegion(JNIEnv*, jbooleanArray@isNULLJZA, jsize@isValidIndexE, jsize@isValidIndexE, jboolean*) 
  spec. void GetBooleanArrayRegion(JNIEnv*@isNULLEnv, jbooleanArray, jsize@isValidIndexE, jsize@isValidIndexE, jboolean*) 
  type. void GetBooleanArrayRegion(JNIEnv*, jbooleanArray, jsize, jsize, jboolean*) 
}

rule{
  spec. void SetDoubleArrayRegion(JNIEnv*, jdoubleArray, jsize@isValidIndexE, jsize@isNegativeE, jdouble*@isNULLJD) 
  spec. void SetDoubleArrayRegion(JNIEnv*, jdoubleArray, jsize@isValidIndexE, jsize@isNegativeE, jdouble*) 
  spec. void SetDoubleArrayRegion(JNIEnv*, jdoubleArray, jsize@isNegativeE, jsize@isValidIndexE, jdouble*) 
  spec. void SetDoubleArrayRegion(JNIEnv*, jdoubleArray@isNULLJDA, jsize@isValidIndexE, jsize@isValidIndexE, jdouble*) 
  spec. void SetDoubleArrayRegion(JNIEnv*@isNULLEnv, jdoubleArray, jsize@isValidIndexE, jsize, jdouble*) 
  type. void SetDoubleArrayRegion(JNIEnv*, jdoubleArray, jsize, jsize, jdouble*) 
}

rule{
  spec. void SetFloatArrayRegion(JNIEnv*, jfloatArray, jsize@isValidIndexE, jsize@isValidIndexE, jfloat*@isNULLJF) 
  spec. void SetFloatArrayRegion(JNIEnv*, jfloatArray, jsize@isValidIndexE, jsize@isNegativeE, jfloat*) 
  spec. void SetFloatArrayRegion(JNIEnv*, jfloatArray, jsize@isNegativeE, jsize@isValidIndexE, jfloat*) 
  spec. void SetFloatArrayRegion(JNIEnv*, jfloatArray@isNULLJFA, jsize@isValidIndexE, jsize@isValidIndexE, jfloat*) 
  spec. void SetFloatArrayRegion(JNIEnv*@isNULLEnv, jfloatArray, jsize@isValidIndexE, jsize@isValidIndexE, jfloat*) 
  type. void SetFloatArrayRegion(JNIEnv*, jfloatArray, jsize, jsize, jfloat*) 
}

rule{
  spec. void SetLongArrayRegion(JNIEnv*, jlongArray, jsize@isValidIndexE, jsize@isValidIndexE, jlong*@isNULLJL) 
  spec. void SetLongArrayRegion(JNIEnv*, jlongArray, jsize@isValidIndexE, jsize@isNegativeE, jlong*) 
  spec. void SetLongArrayRegion(JNIEnv*, jlongArray, jsize@isNegativeE, jsize@isValidIndexE, jlong*) 
  spec. void SetLongArrayRegion(JNIEnv*, jlongArray@isNULLJLA, jsize@isValidIndexE, jsize@isValidIndexE, jlong*) 
  spec. void SetLongArrayRegion(JNIEnv*@isNULLEnv, jlongArray, jsize@isValidIndexE, jsize@isValidIndexE, jlong*) 
  type. void SetLongArrayRegion(JNIEnv*, jlongArray, jsize, jsize, jlong*) 
}

rule{
  spec. void SetIntArrayRegion(JNIEnv*, jintArray, jsize@isValidIndexE, jsize@isValidIndexE, jint*@isNULLJI) 
  spec. void SetIntArrayRegion(JNIEnv*, jintArray, jsize@isValidIndexE, jsize@isNegativeE, jint*) 
  spec. void SetIntArrayRegion(JNIEnv*, jintArray, jsize@isNegativeE, jsize@isValidIndexE, jint*) 
  spec. void SetIntArrayRegion(JNIEnv*, jintArray@isNULLJIA, jsize@isValidIndexE, jsize@isValidIndexE, jint*) 
  spec. void SetIntArrayRegion(JNIEnv*@isNULLEnv, jintArray, jsize@isValidIndexE, jsize@isValidIndexE, jint*) 
  type. void SetIntArrayRegion(JNIEnv*, jintArray, jsize, jsize, jint*) 
}

rule{
  spec. void SetShortArrayRegion(JNIEnv*, jshortArray, jsize@isValidIndexE, jsize@isValidIndexE, jshort*@isNULLJS) 
  spec. void SetShortArrayRegion(JNIEnv*, jshortArray, jsize@isValidIndexE, jsize@isNegativeE, jshort*) 
  spec. void SetShortArrayRegion(JNIEnv*, jshortArray, jsize@isNegativeE, jsize@isValidIndexE, jshort*) 
  spec. void SetShortArrayRegion(JNIEnv*, jshortArray@isNULLJSA, jsize@isValidIndexE, jsize@isValidIndexE, jshort*) 
  spec. void SetShortArrayRegion(JNIEnv*@isNULLEnv, jshortArray, jsize@isValidIndexE, jsize@isValidIndexE, jshort*) 
  type. void SetShortArrayRegion(JNIEnv*, jshortArray, jsize, jsize, jshort*) 
}

rule{
  spec. void SetCharArrayRegion(JNIEnv*, jcharArray, jsize@isValidIndexE, jsize@isValidIndexE, jchar*@isNULLJC) 
  spec. void SetCharArrayRegion(JNIEnv*, jcharArray, jsize@isValidIndexE, jsize@isNegativeE, jchar*) 
  spec. void SetCharArrayRegion(JNIEnv*, jcharArray, jsize@isNegativeE, jsize@isValidIndexE, jchar*) 
  spec. void SetCharArrayRegion(JNIEnv*, jcharArray@isNULLJCA, jsize@isValidIndexE, jsize@isValidIndexE, jchar*) 
  spec. void SetCharArrayRegion(JNIEnv*@isNULLEnv, jcharArray, jsize@isValidIndexE, jsize@isValidIndexE, jchar*) 
  type. void SetCharArrayRegion(JNIEnv*, jcharArray, jsize, jsize, jchar*) 
}

rule{
  spec. void SetByteArrayRegion(JNIEnv*, jbyteArray, jsize@isValidIndexE, jsize@isValidIndexE, jbyte*@isNULLB) 
  spec. void SetByteArrayRegion(JNIEnv*, jbyteArray, jsize@isValidIndexE, jsize@isNegativeE, jbyte*) 
  spec. void SetByteArrayRegion(JNIEnv*, jbyteArray, jsize@isNegativeE, jsize@isValidIndexE, jbyte*) 
  spec. void SetByteArrayRegion(JNIEnv*, jbyteArray@isNULLJBA, jsize@isValidIndexE, jsize@isValidIndexE, jbyte*) 
  spec. void SetByteArrayRegion(JNIEnv*@isNULLEnv, jbyteArray, jsize@isValidIndexE, jsize@isValidIndexE, jbyte*) 
  type. void SetByteArrayRegion(JNIEnv*, jbyteArray, jsize, jsize, jbyte*) 
}

rule{
  spec. void SetBooleanArrayRegion(JNIEnv*, jbooleanArray, jsize@isValidIndexE, jsize@isValidIndexE, jboolean*@isNULLJB) 
  spec. void SetBooleanArrayRegion(JNIEnv*, jbooleanArray, jsize@isValidIndexE, jsize@isNegativeE, jboolean*) 
  spec. void SetBooleanArrayRegion(JNIEnv*, jbooleanArray, jsize@isNegativeE, jsize@isValidIndexE, jboolean*) 
  spec. void SetBooleanArrayRegion(JNIEnv*, jbooleanArray@isNULLJZA, jsize@isValidIndexE, jsize@isValidIndexE, jboolean*) 
  spec. void SetBooleanArrayRegion(JNIEnv*@isNULLEnv, jbooleanArray, jsize@isValidIndexE, jsize@isValidIndexE, jboolean*) 
  type. void SetBooleanArrayRegion(JNIEnv*, jbooleanArray, jsize, jsize, jboolean*) 
}

rule{
  spec. void*@isGetPrimitiveArrayCritical || isNULLV GetPrimitiveArrayCritical(JNIEnv*, jarray@isNULLJA, jboolean*) 
  spec. void*@isGetPrimitiveArrayCritical || isNULLV GetPrimitiveArrayCritical(JNIEnv*@isNULLEnv, jarray, jboolean*) 
  type. void* GetPrimitiveArrayCritical(JNIEnv*, jarray, jboolean*) 
}

rule{
  spec. void ReleasePrimitiveArrayCritical(JNIEnv*, jarray, void*@isGetPrimitiveArrayCritical && isThisVoidArray, jint@isNegativeJI)
  spec. void ReleasePrimitiveArrayCritical(JNIEnv*, jarray, void*@!isGetPrimitiveArrayCritical, jint@isZeroJI || isJNI_COMMITJI || isJNI_ABORTJI)
  spec. void ReleasePrimitiveArrayCritical(JNIEnv*, jarray@isNULLJA, void*@isGetPrimitiveArrayCritical && isThisVoidArray, jint@isZeroJI || isJNI_COMMITJI || isJNI_ABORTJI)
  spec. void ReleasePrimitiveArrayCritical(JNIEnv*@isNULLEnv, jarray, void*@isGetPrimitiveArrayCritical && isThisVoidArray, jint@isZeroJI || isJNI_COMMITJI || isJNI_ABORTJI)
  type. void ReleasePrimitiveArrayCritical(JNIEnv*, jarray, void*, jint)
}

rule{
  spec. jint@isNegativeJI || isZeroJI RegisterNatives(JNIEnv*, jclass, JNINativeMethod*, jint@isNegativeJI) 
  spec. jint@isNegativeJI || isZeroJI RegisterNatives(JNIEnv*, jclass, JNINativeMethod*@isNULLNMD, jint@isThisArrayLenJI) 
  spec. jint@isNegativeJI || isZeroJI RegisterNatives(JNIEnv*, jclass@isNULLCL, JNINativeMethod*, jint@isThisArrayLenJI) 
  spec. jint@isNegativeJI || isZeroJI RegisterNatives(JNIEnv*@isNULLEnv, jclass, JNINativeMethod*, jint@isThisArrayLenJI) 
  type. jint RegisterNatives(JNIEnv*, jclass, JNINativeMethod*, jint) 
}

rule{
  spec. jint@isNegativeJI || isZeroJI UnregisterNatives(JNIEnv*, jclass@isNULLCL) 
  spec. jint@isNegativeJI || isZeroJI UnregisterNatives(JNIEnv*@isNULLEnv, jclass) 
  type. jint UnregisterNatives(JNIEnv*, jclass) 
}

rule{
  spec. jint@isNegativeJI || isZeroJI GetJavaVM(JNIEnv*, JavaVM**@isNULLJVM)
  spec. jint@isNegativeJI || isZeroJI GetJavaVM(JNIEnv*@isNULLEnv, JavaVM**)
  type. jint GetJavaVM(JNIEnv*, JavaVM*)
}

rule{
  spec. jobject GetModule(JNIEnv*, jclass@isNULLCL)
  spec. jobject GetModule(JNIEnv*@isNULLEnv, jclass)
  type. jobject GetModule(JNIEnv*, jclass)
}

